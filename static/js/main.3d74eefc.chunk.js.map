{"version":3,"sources":["core-square.ts","tools.ts","wall.tsx","constants.ts","solving-area.tsx","local-storage.ts","setting-area.tsx","url-tools.ts","starting-setup.ts","app.tsx","reportWebVitals.ts","index.tsx"],"names":["filterClue","clue","replace","makeCoreSquare","answerGroup","selected","badGuess","solvedGroup","DumbEncrypt","val","encrypted","this","prime","Math","floor","random","undoInt","Error","Square","coreSquare","index","onSelect","className","group","console","log","onClick","Wall","coreSquares","map","cs","toString","SolvingArea","hasBadGuess","clueSelected","doClearGuess","doRestart","ClearGuessButton","type","RestartButton","LocalStorage","key","_key","rawStorage","localStorage","getItem","JSON","parse","data","undefined","removeItem","stringified","stringify","setItem","squares","sq","join","clear","trimmed","words","result","i","t","trim","push","SettingArea","recordClues","useState","recordedText","setRecordedText","errorMessage","setErrorMessage","ErrorMessage","cols","rows","onChange","event","target","value","spaceSeparated","split","length","commaSeparated","text","getCluesCommaSeperated","clearAll","makeSquares","urlParams","urlClues","get","clues","groupSize","unpackURLClues","urlSolutionGroups","values","urlKey","combinedValues","parseInt","reverse","g","filter","k","unpackURLSolutionGroups","Boolean","window","location","search","startingSetup","makeSquaresFromURL","URLSearchParams","err","alert","getURLsquares","cluesSet","make","getLocalStorage","storedSquares","sanityCheckStoredSquares","groupNo","n","makeEmptySquares","groupFromIndex","positionSquaresInSolvedGroup","groupBeingProcessed","positional","current","sanityCheckSolvedGroups","moveTo","findIndex","s","startingSquares","cluesSetFromStart","App","setCoreSquares","cluesEntered","setCluesEntered","useEffect","document","title","find","forEach","every","lastSolvedGroup","set","newSquares","reload","ResultArea","append","slice","doInt","makeUrlParams","array","j","shuffleArray","url","href","coreSquares_","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3d74eefc.chunk.js","sourcesContent":["\r\n\r\n// Remove unsuitable characeters from clue\r\nfunction filterClue(clue: string) {\r\n  // For now at least just remove '~' as that has special meaning in\r\n  // the URLs that are generated. \r\n  return clue.replace(/~/g, \"\");\r\n}\r\n\r\n\r\n// Warning: Change this interface is likely to break any recorded data\r\ninterface CoreSquare {\r\n  readonly answerGroup: number;\r\n  clue: string;\r\n  selected: boolean;\r\n  badGuess: boolean;\r\n  solvedGroup: number | null;\r\n}\r\n\r\n\r\nfunction makeCoreSquare(answerGroup: number, clue: string = \"\") : CoreSquare {\r\n  return {\r\n    answerGroup: answerGroup,\r\n    clue: filterClue(clue),\r\n    selected: false,\r\n    badGuess: false,\r\n    solvedGroup: null,\r\n  }\r\n}\r\n\r\n\r\nexport type {CoreSquare};\r\nexport {makeCoreSquare};\r\n","// Shuffle array in place. Return the shuffled array\r\nexport function shuffleArray<T>(array: Array<T>) {\r\n    // From https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n  \r\nexport  class DumbEncrypt {\r\n    private static readonly  prime = 19793;\r\n  \r\n    static doInt(val: number) {\r\n      const encrypted = val * this.prime +\r\n        Math.floor(Math.random() * this.prime);\r\n  \r\n      if(this.undoInt(encrypted) !== val) {\r\n        throw new Error(`DumbEncypt.doInt Cannot encrypt ${val}`);\r\n      } \r\n      return encrypted;\r\n    }\r\n  \r\n    static undoInt(val: number) {\r\n      return Math.floor(val / this.prime);\r\n    }\r\n  };\r\n\r\n","import React, { FC } from 'react';\r\nimport {validSolvedGroup} from './constants';\r\n\r\ninterface CoreSquare {\r\n    clue: string;\r\n    selected: boolean;\r\n    badGuess: boolean;\r\n    solvedGroup: number | null;\r\n};\r\n\r\ninterface SquareProps {\r\n    coreSquare: CoreSquare;\r\n    index: number;\r\n    onSelect?: (index:number) => void;\r\n}\r\n\r\nconst Square : FC<SquareProps> = ({coreSquare, index, onSelect}: SquareProps) => {\r\n  \r\n    const onClick: () => void = () => {\r\n        if(onSelect)\r\n            onSelect(index)\r\n    };\r\n\r\n    let className = \"square\";\r\n    if (coreSquare.selected) {\r\n        className += \" selected\";\r\n    }\r\n    if (coreSquare.badGuess) {\r\n        className += \" bad-guess\";\r\n    }\r\n\r\n    const solvedGroup = coreSquare.solvedGroup;\r\n    if (solvedGroup !== null) {\r\n        if(validSolvedGroup(solvedGroup)) {\r\n            className += \" group\" + coreSquare.solvedGroup;\r\n        } else {\r\n            console.log(\"Invalid solved group for\", coreSquare);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onClick={onClick}\r\n            className={className}\r\n        >\r\n            {coreSquare.clue}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\ninterface WallProps {\r\n    coreSquares: Array<CoreSquare>,\r\n    onSelect?: (index: number) => void,\r\n};\r\n\r\nconst Wall: FC<WallProps> = ({ coreSquares, onSelect }: WallProps) => {\r\n    return (\r\n        <div className=\"wall\">\r\n            {coreSquares.map((cs: CoreSquare, index: number) => (\r\n                <Square \r\n                    key={index.toString()} \r\n                    index={index}\r\n                    coreSquare={cs}\r\n                    onSelect={onSelect}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wall;\r\nexport type { CoreSquare }","export const groupSize = 4;\r\nexport const nGroups = 4;\r\nexport const nSquares = groupSize * nGroups;\r\n\r\nexport function validSolvedGroup(group: number) {\r\n  return group >= 1 && group <= nGroups;\r\n}","import React from 'react';\r\nimport Wall, { CoreSquare } from './wall'\r\n\r\n\r\ninterface SolvingAreaProps {\r\n    coreSquares: Array<CoreSquare>\r\n    hasBadGuess: boolean;\r\n    clueSelected: (index: number) => void,\r\n    doClearGuess: ()=>void;\r\n    doRestart: ()=>void;\r\n}\r\n\r\nfunction SolvingArea({coreSquares, hasBadGuess, clueSelected, doClearGuess, doRestart} : SolvingAreaProps) {\r\n\r\n     const ClearGuessButton = () => (\r\n        <button type=\"button\" onClick={doClearGuess}>\r\n            Clear guess\r\n        </button>\r\n    );\r\n    const RestartButton = () => (\r\n        <button className=\"restart-button\" type=\"button\" onClick={doRestart}>\r\n            Restart\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <div className=\"solving-area\">\r\n            <Wall\r\n                coreSquares={coreSquares}\r\n                onSelect={clueSelected}\r\n            />\r\n            <div className=\"solving-controls\">\r\n                <div>\r\n                    <ClearGuessButton/>\r\n                    {hasBadGuess ? <div>Wrong!</div> : null}\r\n                </div>\r\n                <RestartButton/>\r\n            </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default SolvingArea;","import { CoreSquare } from './core-square';\r\n\r\n\r\nclass LocalStorage {\r\n  constructor(key: string) {\r\n    this._key = key;\r\n  }\r\n  readonly _key: string;\r\n\r\n  get() : any {\r\n    const rawStorage = localStorage.getItem(this._key);\r\n    return rawStorage ? JSON.parse(rawStorage) : null;\r\n  }\r\n\r\n  set(data: any) {\r\n    if(data === null || data === undefined) {\r\n      localStorage.removeItem(this._key);\r\n    } else {\r\n      const stringified = JSON.stringify(data);\r\n      localStorage.setItem(this._key, stringified)\r\n    }\r\n  }\r\n\r\n  static make(squares: Array<CoreSquare>) {\r\n    const key = squares.map(sq => sq.clue).join();\r\n    return new LocalStorage(key);\r\n  }\r\n\r\n  static clearAll() {\r\n    localStorage.clear();\r\n  }\r\n}\r\n\r\n\r\nexport default LocalStorage;","import React, { useState } from 'react';\r\nimport LocalStorage from \"./local-storage\";\r\n\r\nfunction trimmed(words: Array<string>) {\r\n    console.log(\"Pre-trimmed\", words);\r\n\r\n    let result: Array<string> = [];\r\n    for (let i in words) {\r\n        const t = words[i].trim();\r\n        if (t) {\r\n            result.push(t);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction getCluesSpaceSeperated(text: string) {\r\n    return trimmed(text.split(/[,\\s]/));\r\n}\r\n\r\n// Find non-empty clues separated by commas or newlines\r\nfunction getCluesCommaSeperated(text: string) {\r\n    return trimmed(text.split(/[,\\n]/));\r\n}\r\n\r\ninterface SettingAreaProps {\r\n    recordClues: (clues: Array<string> | null) => void;\r\n}\r\nfunction SettingArea({ recordClues }: SettingAreaProps) {\r\n    const [recordedText, setRecordedText] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n\r\n    function textAreaChange(event: any) {\r\n        setRecordedText(event.target.value);\r\n    }\r\n\r\n    function onDone() {\r\n        setErrorMessage(\"\");\r\n\r\n        const spaceSeparated = getCluesSpaceSeperated(recordedText);\r\n        console.log(\"Space separated\", spaceSeparated);\r\n        if (spaceSeparated.length === 16) {\r\n            recordClues(spaceSeparated);\r\n            return;\r\n        }\r\n\r\n        const commaSeparated = getCluesCommaSeperated(recordedText);\r\n        console.log(\"Comma separated\", commaSeparated);\r\n\r\n        if (commaSeparated.length === 16) {\r\n            recordClues(commaSeparated);\r\n            return;\r\n        }\r\n\r\n        setErrorMessage(`Did not find 16 clues: \r\n            ${spaceSeparated.length} found with space seperation.\r\n            ${commaSeparated.length} found with comma-seperation.`\r\n        );\r\n\r\n\r\n    }\r\n\r\n    const ErrorMessage = () => {\r\n        if (errorMessage) {\r\n            return <div>{\"Error: \" + errorMessage}</div>\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"setting-area\" >\r\n            <p>Enter clues.  These can be single words, or words and phrases seperated by commas</p>\r\n            <textarea\r\n                cols={50}\r\n                rows={4}\r\n                onChange={textAreaChange}\r\n            />\r\n\r\n            <div className=\"setting-area-buttons\">\r\n                <button className=\"done-button\" onClick={onDone}>Done</button>\r\n                <button className=\"clear-stored-solutions-button\" onClick={LocalStorage.clearAll}>\r\n                    Clear stored solutions\r\n            </button>\r\n            </div>\r\n            <ErrorMessage />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SettingArea;","import { CoreSquare, makeCoreSquare } from './core-square';\r\nimport {  nSquares, groupSize, nGroups } from './constants';\r\nimport { DumbEncrypt } from './tools';\r\n\r\n\r\nfunction makeUrlParams(squares: Array<CoreSquare>) {\r\n\r\n  let urlParams = new URLSearchParams();\r\n\r\n  let clues = \"\";\r\n  squares.forEach(s => clues += s.clue + \"~\");\r\n  urlParams.append(\"clues\", clues.slice(0, -1));\r\n\r\n  let key = 0;\r\n  squares.forEach(s => key = key * nGroups + s.answerGroup);\r\n  const encrypted = DumbEncrypt.doInt(key);\r\n  urlParams.append(\"key\", encrypted.toString());\r\n  return urlParams;\r\n}\r\n\r\nfunction unpackURLClues(urlParams: URLSearchParams) {\r\n\r\n  const urlClues = urlParams.get(\"clues\");\r\n  if (urlClues) {\r\n    const clues = urlClues.split(\"~\");\r\n\r\n    if (clues.length === nSquares) {\r\n      return clues;\r\n    } else {\r\n      console.log(\"Did not find the expected number of clues\", clues);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction unpackURLSolutionGroups(urlParams: URLSearchParams) {\r\n  let values: Array<number> | null = null;\r\n\r\n  const urlKey = urlParams.get(\"key\");\r\n  if (urlKey) {\r\n\r\n    let combinedValues = DumbEncrypt.undoInt(parseInt(urlKey));\r\n\r\n    values = [];\r\n    for (let i = 0; i < nSquares; ++i) {\r\n      const value = combinedValues % nGroups;\r\n      combinedValues = (combinedValues - value) / nGroups;\r\n      values.push(value);\r\n    }\r\n    values.reverse();\r\n\r\n    // Check the values.  There should be groupSize values for each group.\r\n    for (let g = 0; values && g < nGroups; ++g) {\r\n      const matched = values.filter(k => k === g);\r\n      if (matched.length !== groupSize) {\r\n        console.log(\"Cannot interpret urlKey\", urlKey);\r\n        values = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\nfunction makeSquares(urlParams: URLSearchParams) : Array<CoreSquare> | null {\r\n\r\n  const urlClues = unpackURLClues(urlParams);\r\n  const urlSolutionGroups = unpackURLSolutionGroups(urlParams);\r\n\r\n\r\n  if (Boolean(urlClues) !== Boolean(urlSolutionGroups)) {\r\n    console.log(\"window.location.search\", window.location.search,\r\n      \"\\nurlClue\", urlClues,\r\n      \"\\nurlSolutionGroups\", urlSolutionGroups\r\n    );\r\n\r\n    throw new Error(\"Could not understand URL parameters\");\r\n  }\r\n\r\n  if (urlClues && urlSolutionGroups) {\r\n    let squares = [];\r\n    for (let i = 0; i < nSquares; ++i) {\r\n      squares.push(makeCoreSquare(urlSolutionGroups[i], urlClues[i]));\r\n    }\r\n    return squares;\r\n  } else {\r\n    return null;\r\n  } \r\n\r\n}\r\n\r\nexport { makeSquares, makeUrlParams }\r\n\r\n","import { CoreSquare, makeCoreSquare } from './core-square';\r\nimport { nGroups, groupSize, nSquares } from './constants';\r\nimport { makeSquares as makeSquaresFromURL } from './url-tools';\r\nimport LocalStorage from \"./local-storage\";\r\n\r\nfunction makeEmptySquares() {\r\n  let squares = [];\r\n  for (let groupNo = 0; groupNo < nGroups; ++groupNo) {\r\n    for (let n = 0; n < groupSize; ++n) {\r\n      squares.push(makeCoreSquare(groupNo));\r\n    }\r\n  }\r\n\r\n  return squares;\r\n}\r\n\r\nfunction sanityCheckStoredSquares(\r\n  squares: any\r\n) {\r\n  if (squares.length !== nSquares) {\r\n    alert(\"Recorded data appears incorrect\");\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\ntype StartingSetup = [Array<CoreSquare>, boolean, LocalStorage | null];\r\n\r\nfunction getURLsquares() {\r\n  try {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    return makeSquaresFromURL(urlParams);\r\n  } catch (err) {\r\n    console.log(err);\r\n    alert(\"URL appears incorrect\");\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getLocalStorage(squares: Array<CoreSquare>): LocalStorage | null {\r\n  try {\r\n    return LocalStorage.make(squares);\r\n  } catch (err) {\r\n    console.log(err);\r\n    alert(\"Problem getting recorded data\");\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n\r\nfunction startingSetup(): StartingSetup {\r\n  let squares = getURLsquares();\r\n  const cluesSet = Boolean(squares);\r\n\r\n  let localStorage = squares && getLocalStorage(squares);\r\n\r\n  if (localStorage) {\r\n    const storedSquares = localStorage.get();\r\n    if (storedSquares && sanityCheckStoredSquares(storedSquares)) {\r\n      squares = storedSquares;\r\n    }\r\n  }\r\n\r\n  squares = squares || makeEmptySquares();\r\n\r\n  return [squares, cluesSet, localStorage]\r\n\r\n}\r\n\r\nexport default startingSetup;\r\n","// TO DO:  Tidy this code so it less of a dogs dinner.\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { CoreSquare, makeCoreSquare } from './core-square';\r\nimport { nGroups, groupSize } from './constants';\r\nimport { shuffleArray } from './tools';\r\n\r\nimport SolvingArea from './solving-area'\r\nimport SettingArea from './setting-area'\r\nimport Wall from './wall';\r\n\r\nimport {makeUrlParams } from './url-tools';\r\nimport startingSetup from './starting-setup';\r\n\r\nimport './App.css';\r\n\r\nfunction groupFromIndex(index: number) {\r\n  return Math.floor(index / groupSize) + 1;\r\n}\r\n\r\nfunction lastSolvedGroup(squares: Array<CoreSquare>) {\r\n  for(let group = nGroups; group > 0; --group) {\r\n      if(squares.find(s => s && s.solvedGroup === group)) {\r\n        return group;\r\n      }\r\n  }\r\n  return 0;\r\n}\r\n\r\n// Check that \r\n// - Squares in solved groups below 'groupBeingProcessed' are correctly placed\r\n// = No square is in a solved group greated than  'groupBeingProcessed'\r\n// Throw an error the if check fails.\r\nfunction sanityCheckSolvedGroups(squares: Array<CoreSquare>, groupBeingProcessed: number) {\r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const positional = groupFromIndex(index);\r\n    const current = squares[index].solvedGroup;\r\n    if(positional < groupBeingProcessed) {\r\n        if(positional !== current) {\r\n          throw new Error(`square ${index} is not in solved group ${positional}`)\r\n        }\r\n\r\n        if (current > groupBeingProcessed) {\r\n          throw new Error(`square ${index} is in unexpected solved fron ${current}`)\r\n        }\r\n    }\r\n  }\r\n}\r\nfunction positionSquaresInSolvedGroup(squares: Array<CoreSquare>, groupNo: number) {\r\n\r\n  sanityCheckSolvedGroups(squares, groupNo);\r\n\r\n  // Relies on properties cheched above. \r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const sq = squares[index];\r\n    if (sq.solvedGroup === groupNo && groupFromIndex(index) !== groupNo) {\r\n      const moveTo = squares.findIndex(s => !s.solvedGroup); // Inefficient\r\n      if (groupFromIndex(moveTo) !== groupNo) {\r\n        throw new Error(\"Bah! Something has gone wrong\");\r\n      }\r\n      [squares[index], squares[moveTo]] = [squares[moveTo], squares[index]];\r\n    }\r\n  }\r\n}\r\n\r\nconst [startingSquares, cluesSetFromStart, localStorage ] = startingSetup();\r\n\r\nconst App: FC<{}> = () => {\r\n\r\n  const [coreSquares, setCoreSquares] = useState(startingSquares);\r\n  const [cluesEntered, setCluesEntered] = useState(false);\r\n\r\n  useEffect(() => { document.title = \"OnlyConnect\" });\r\n\r\n  const cluesSet = (clues: Array<string>) => {\r\n    const coreSquares_ = clues.map((clue, index) => {\r\n      const group = Math.floor(index / 4);\r\n      return makeCoreSquare(group, clue);\r\n    });\r\n    setCoreSquares(coreSquares_);\r\n    setCluesEntered(true);\r\n  }\r\n\r\n\r\n  const clueSelected: (index: number) => void = (index) => {\r\n    // Ignore squares that have already been solved.\r\n    if (cluesSetFromStart && !coreSquares[index].solvedGroup) {\r\n\r\n      let squares = [...coreSquares];\r\n      squares.forEach(s => s.badGuess = false);\r\n      squares[index].selected = !squares[index].selected;\r\n\r\n      let selected = squares.filter(cs => cs.selected);\r\n      if (selected.find(s => s.solvedGroup)) {\r\n        throw new Error(\"Selected square is already solved\");\r\n      }\r\n\r\n      if (selected.length === groupSize) {\r\n        selected.forEach(s => s.selected = false);\r\n\r\n        if (selected.every(s => s.answerGroup === selected[0].answerGroup)) {\r\n          // The selected sqaures are in the same group, so the group has been solved.\r\n\r\n          const solvedGroup = lastSolvedGroup(squares) + 1;\r\n\r\n\r\n          selected.forEach(s => s.solvedGroup = solvedGroup);\r\n          positionSquaresInSolvedGroup(squares, solvedGroup);\r\n\r\n          // If the last but one group has been solve, then the last group \r\n          // must also be solved.\r\n          if (solvedGroup + 1 === nGroups) {\r\n            squares.forEach(s => {\r\n              if (!s.solvedGroup) {\r\n                s.solvedGroup = nGroups;\r\n              }\r\n            })\r\n\r\n\r\n          }\r\n        } else {\r\n          selected.forEach(s => s.badGuess = true);\r\n        }\r\n      }\r\n\r\n\r\n      localStorage!.set(squares);\r\n      setCoreSquares(squares);\r\n    }\r\n  }\r\n\r\n  const hasBadGuess = Boolean(coreSquares.find(s => s.badGuess));\r\n\r\n  const doClearGuess = () => {\r\n    let newSquares = [...coreSquares];\r\n    newSquares.forEach(s => {\r\n      s.badGuess = false;\r\n      s.selected = false;\r\n    });\r\n    setCoreSquares(newSquares);\r\n  }\r\n\r\n  const doRestart = () => {\r\n    localStorage!.set(null);\r\n    window.location.reload();\r\n  }\r\n\r\n  if (cluesSetFromStart) {\r\n    return (<SolvingArea\r\n      coreSquares={coreSquares}\r\n      hasBadGuess={hasBadGuess}\r\n      clueSelected={clueSelected}\r\n      doClearGuess={doClearGuess}\r\n      doRestart={doRestart}\r\n    />);\r\n  }\r\n\r\n  const ResultArea = () => {\r\n    const shuffled = shuffleArray([...coreSquares]);\r\n    const urlParams = makeUrlParams(shuffled);\r\n    const url = window.location.href + \"?\" + urlParams.toString();\r\n    return (\r\n      <div>\r\n        <Wall coreSquares={coreSquares} />\r\n        <div> <a href={url} target=\"blank\">Randomised (Playable)</a> </div>\r\n      </div>);\r\n  }\r\n\r\n  const recordClues = (clues: Array<string> | null) => {\r\n    if (clues) {\r\n      cluesSet(clues);\r\n    } else {\r\n      setCluesEntered(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"setting-area\">\r\n      <SettingArea recordClues={recordClues} />\r\n      {cluesEntered ? <ResultArea /> : null}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}