{"version":3,"sources":["wall.tsx","solving-area.tsx","setting-area.tsx","tools.ts","app.tsx","reportWebVitals.ts","index.tsx"],"names":["Square","coreSquare","index","onSelect","className","selected","badGuess","solvedGroup","onClick","clue","Wall","coreSquares","map","cs","toString","SolvingArea","hasGuess","hasBadGuess","clueSelected","doClearGuess","clearGuessButton","type","removeLastIfEmpty","clues","length","pop","SettingArea","recordClues","useState","recordedText","setRecordedText","errorMessage","setErrorMessage","ErrorMessage","cols","rows","onChange","event","target","value","text","commaSep","split","getClues","console","log","message","forEach","word","DumbEncrypt","val","encrypted","this","prime","Math","floor","random","undoInt","Error","filterClue","replace","groupFromIndex","CoreSquare","answerGroup","cluesSetByURL","startingSquares","positionSquaresInSolvedGroup","squares","groupNo","groupBeingProcessed","positional","current","sanityCheckSolvedGroups","moveTo","findIndex","s","urlParams","URLSearchParams","window","location","search","urlClues","get","groupSize","unpackURLClues","urlSolutionGroups","values","urlKey","combinedValues","parseInt","i","push","reverse","g","filter","k","unpackURLSolutionGroups","alert","n","processURLParams","App","setCoreSquares","cluesEntered","setCluesEntered","lastSolvedGroup","setLastSolvedGroup","useEffect","document","title","Boolean","find","every","newSquares","ResultArea","append","slice","key","doInt","makeUrlParams","array","j","shuffleArray","url","href","coreSquares_","group","cluesSet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.48217cc9.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\n\r\n\r\ninterface CoreSquare {\r\n    clue: string;\r\n    selected: boolean;\r\n    badGuess: boolean;\r\n    solvedGroup: number | null;\r\n};\r\n\r\ninterface SquareProps {\r\n    coreSquare: CoreSquare;\r\n    index: number;\r\n    onSelect?: (index:number) => void;\r\n}\r\n\r\nconst Square : FC<SquareProps> = ({coreSquare, index, onSelect}: SquareProps) => {\r\n  \r\n    const onClick: () => void = () => {\r\n        if(onSelect)\r\n            onSelect(index)\r\n    };\r\n\r\n    let className = \"square\";\r\n    if (coreSquare.selected) {\r\n        className += \" selected\";\r\n    }\r\n    if (coreSquare.badGuess) {\r\n        className += \" bad-guess\";\r\n    }\r\n    if (coreSquare.solvedGroup) {\r\n        className += \" group\" + coreSquare.solvedGroup;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onClick={onClick}\r\n            className={className}\r\n        >\r\n            {coreSquare.clue}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\ninterface WallProps {\r\n    coreSquares: Array<CoreSquare>,\r\n    onSelect?: (index: number) => void,\r\n};\r\n\r\nconst Wall: FC<WallProps> = ({ coreSquares, onSelect }: WallProps) => {\r\n    return (\r\n        <div className=\"wall\">\r\n            {coreSquares.map((cs: CoreSquare, index: number) => (\r\n                <Square \r\n                    key={index.toString()} \r\n                    index={index}\r\n                    coreSquare={cs}\r\n                    onSelect={onSelect}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wall;\r\nexport type { CoreSquare }","import React from 'react';\r\nimport Wall, { CoreSquare } from './wall'\r\n\r\n\r\ninterface SolvingAreaProps {\r\n    coreSquares: Array<CoreSquare>\r\n    hasGuess: boolean;\r\n    hasBadGuess: boolean;\r\n    clueSelected: (index: number) => void,\r\n    doClearGuess: ()=>void;\r\n}\r\n\r\nfunction SolvingArea({coreSquares, hasGuess, hasBadGuess, clueSelected, doClearGuess} : SolvingAreaProps) {\r\n\r\n     const clearGuessButton = (\r\n        <button type=\"button\" onClick={doClearGuess}>\r\n            Clear guess\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Wall\r\n                coreSquares={coreSquares}\r\n                onSelect={clueSelected}\r\n            />\r\n            <div className=\"controls\">\r\n                {hasGuess ? clearGuessButton : null}\r\n                {hasBadGuess ? <div>Wrong!</div> : null}\r\n            </div>\r\n        </>\r\n    );\r\n} \r\n\r\nexport default SolvingArea;","import React, {useState} from 'react';\r\n\r\n\r\nfunction removeLastIfEmpty(clues: Array<string>)\r\n{\r\n    if(clues[clues.length-1] === \"\") {\r\n        clues.pop();\r\n    }\r\n    return clues;\r\n}\r\n\r\nfunction getClues(text: string) {\r\n    const commaSep = text.split(/,\\s*/);\r\n    if(commaSep.length > 1) {\r\n        return removeLastIfEmpty(commaSep);\r\n    }\r\n    return removeLastIfEmpty(text.split(/\\s+/));\r\n\r\n}\r\n\r\ninterface SettingAreaProps {\r\n    recordClues: (clues: Array<string> | null) => void;\r\n}\r\nfunction SettingArea({recordClues} : SettingAreaProps)\r\n{\r\n    const [recordedText, setRecordedText] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n\r\n    function textAreaChange(event: any) {\r\n        setRecordedText(event.target.value);\r\n    }\r\n\r\n    function onDone() {\r\n        const clues = getClues(recordedText);\r\n        if(clues.length === 16) {\r\n            console.log(\"Done:\", clues);\r\n            recordClues(clues);\r\n            setErrorMessage(\"\");\r\n        } else {\r\n            let message = clues.length + \" clues found:\";\r\n            clues.forEach(word => message += ` '${word}',`);\r\n            setErrorMessage(message);\r\n            recordClues(null);\r\n        }\r\n    }\r\n\r\n    const ErrorMessage = () => {\r\n        if(errorMessage) {\r\n            return <div>{\"Error: \" + errorMessage}</div>\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    return (<>\r\n        <div>\r\n            <p>Enter clues.  These can be single words, or words and phrases seperated by commas</p>\r\n            <textarea  \r\n                cols={50}\r\n                rows={4}\r\n                onChange={textAreaChange}\r\n            />\r\n        </div>\r\n        <button onClick={onDone}>Done</button>\r\n        <ErrorMessage/>\r\n    </>);\r\n}\r\n\r\nexport default SettingArea;","// Shuffle array in place. Return the shuffled array\r\nexport function shuffleArray<T>(array: Array<T>) {\r\n    // From https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n  \r\nexport  class DumbEncrypt {\r\n    private static readonly  prime = 19793;\r\n  \r\n    static doInt(val: number) {\r\n      const encrypted = val * this.prime +\r\n        Math.floor(Math.random() * this.prime);\r\n  \r\n      if(this.undoInt(encrypted) !== val) {\r\n        throw new Error(`DumbEncypt.doInt Cannot encrypt ${val}`);\r\n      } \r\n      return encrypted;\r\n    }\r\n  \r\n    static undoInt(val: number) {\r\n      return Math.floor(val / this.prime);\r\n    }\r\n  };\r\n\r\n","// TO DO:  Tidy this code so it less of a dogs dinner.\r\nimport React, { FC, useEffect, useState} from 'react';\r\nimport SolvingArea from './solving-area'\r\nimport SettingArea from './setting-area'\r\nimport { shuffleArray, DumbEncrypt } from './tools';\r\nimport './App.css';\r\nimport Wall from './wall';\r\n\r\n// Remove unsuitable characeters from clue\r\nfunction filterClue(clue: string) {\r\n  // For now at least just remove '~' as that has special meaning in\r\n  // the URLs that are generated. \r\n  return clue.replace(/~/g, \"\");\r\n}\r\n\r\nlet startingClues: Array<string>;\r\n// startingClues = [\r\n//   'a1', 'a2', 'a3', 'a4',\r\n//   'b1', 'b2', 'b3', 'b4',\r\n//   'c1', 'c2', 'c3', 'c4',\r\n//   'd1 longlonglong', 'd2', 'd3', 'd4',\r\n// ];\r\n\r\nconst groupSize = 4;\r\nconst nGroups = 4;\r\nconst nSquares = groupSize * nGroups;\r\n\r\nfunction groupFromIndex(index: number) {\r\n  return Math.floor(index/groupSize) + 1;\r\n}\r\n\r\nclass CoreSquare {\r\n  readonly answerGroup: number;\r\n  clue: string;\r\n  selected = false;\r\n  badGuess = false; \r\n  solvedGroup: number | null = null;\r\n\r\n  constructor(answerGroup: number, clue=\"\") {\r\n    this.answerGroup = answerGroup;\r\n    this.clue = filterClue(clue);\r\n  }\r\n};\r\n\r\n\r\nfunction makeUrlParams(squares: Array<CoreSquare>) {\r\n\r\n  let urlParams = new URLSearchParams();\r\n\r\n  let clues=\"\";\r\n  squares.forEach(s => clues += s.clue + \"~\");\r\n  urlParams.append(\"clues\", clues.slice(0, -1));\r\n\r\n  let key = 0;\r\n  squares.forEach(s => key = key * nGroups + s.answerGroup);\r\n  const encrypted = DumbEncrypt.doInt(key);\r\n  urlParams.append(\"key\", encrypted.toString());\r\n  return urlParams;\r\n}\r\n\r\nfunction unpackURLClues(urlParams: URLSearchParams) {\r\n\r\n  const urlClues = urlParams.get(\"clues\");\r\n  if(urlClues) {\r\n    const clues = urlClues.split(\"~\");\r\n    \r\n    if(clues.length === nSquares) {\r\n      return clues;\r\n    } else {\r\n      console.log(\"Did not find the expected number of clues\", clues);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction unpackURLSolutionGroups(urlParams: URLSearchParams) {\r\n  let values: Array<number> | null = null;\r\n\r\n  const urlKey = urlParams.get(\"key\");\r\n  if (urlKey) {\r\n\r\n    let combinedValues = DumbEncrypt.undoInt(parseInt(urlKey));\r\n\r\n    values = [];\r\n    for (let i = 0; i < nSquares; ++i) {\r\n      const value = combinedValues % nGroups;\r\n      combinedValues = (combinedValues - value) / nGroups;\r\n      values.push(value);\r\n    }\r\n    values.reverse();\r\n\r\n    // Check the values.  There should be groupSize values for each group.\r\n    for (let g = 0; values && g < nGroups; ++g) {\r\n      const matched = values.filter(k => k === g);\r\n      if (matched.length !== groupSize) {\r\n        console.log(\"Cannot interpret urlKey\", urlKey);\r\n        values = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\nlet startingSquares: Array<CoreSquare> = [];\r\nlet cluesSetByURL: boolean;\r\n\r\n// KLUDGE - Use to set gloabls. Would be better called in the App.\r\nfunction processURLParams() {\r\n\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    \r\n    const urlClues = unpackURLClues(urlParams);\r\n    const urlSolutionGroups = unpackURLSolutionGroups(urlParams);\r\n    \r\n    cluesSetByURL = false;\r\n    if(urlClues && urlSolutionGroups) {\r\n      cluesSetByURL = true;\r\n      \r\n      for(let i = 0; i < nSquares; ++i) {\r\n        startingSquares.push(\r\n          new CoreSquare(urlSolutionGroups[i], urlClues[i])\r\n        );\r\n      }\r\n    }\r\n    else {\r\n      if(urlParams.toString()) {\r\n        alert(\"Could not understand URL parameters\");\r\n      }\r\n\r\n      for (let groupNo = 0; groupNo < nGroups; ++groupNo) {\r\n        for (let n = 0; n < groupSize; ++n) {\r\n          let s = new CoreSquare(groupNo);\r\n          startingSquares.push(s);\r\n\r\n          // To help with testing\r\n          if (startingClues) {\r\n            s.clue = startingClues[n + groupNo * groupSize];\r\n          }\r\n        }\r\n      }\r\n    }\r\n}\r\n\r\nprocessURLParams();\r\n\r\n\r\n// Check that \r\n// - Squares in solved groups below 'groupBeingProcessed' are correctly placed\r\n// = No square is in a solved group greated than  'groupBeingProcessed'\r\n// Throw an error the if check fails.\r\nfunction sanityCheckSolvedGroups(squares: Array<CoreSquare>, groupBeingProcessed: number) {\r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const positional = groupFromIndex(index);\r\n    const current = squares[index].solvedGroup;\r\n    if(positional < groupBeingProcessed) {\r\n        if(positional !== current) {\r\n          throw new Error(`square ${index} is not in solved group ${positional}`)\r\n        }\r\n\r\n        if (current > groupBeingProcessed) {\r\n          throw new Error(`square ${index} is in unexpected solved fron ${current}`)\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\nfunction positionSquaresInSolvedGroup(squares: Array<CoreSquare>, groupNo: number) {\r\n\r\n  sanityCheckSolvedGroups(squares, groupNo);\r\n\r\n  // Relies on properties cheched above. \r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const sq = squares[index];\r\n    if (sq.solvedGroup === groupNo && groupFromIndex(index) !== groupNo) {\r\n      const moveTo = squares.findIndex(s => !s.solvedGroup); // Inefficient\r\n      if (groupFromIndex(moveTo) !== groupNo) {\r\n        throw new Error(\"Bah! Something has gone wrong\");\r\n      }\r\n      [squares[index], squares[moveTo]] = [squares[moveTo], squares[index]];\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst App: FC<{}> = () => {\r\n\r\n  const [coreSquares, setCoreSquares] = useState(startingSquares);\r\n  const [cluesEntered, setCluesEntered] = useState(false);\r\n\r\n  const [lastSolvedGroup, setLastSolvedGroup] = useState(0);\r\n  useEffect(()=>{document.title = \"OnlyConnect\"});\r\n\r\n  \r\n  const cluesSet = (clues: Array<string>) => {\r\n    const coreSquares_ = clues.map((clue, index) => {\r\n      const group = Math.floor(index/4);\r\n      return new CoreSquare(group, clue);\r\n    }); \r\n    setCoreSquares(coreSquares_);\r\n    setCluesEntered(true);\r\n  }\r\n\r\n\r\n  const clueSelected: (index: number) => void = (index) => {\r\n\r\n    // Ignore squares that have already been solved.\r\n    if(cluesSetByURL && !coreSquares[index].solvedGroup) {\r\n      let squares = [...coreSquares];\r\n      squares.forEach(s => s.badGuess = false);\r\n      squares[index].selected = !squares[index].selected;\r\n\r\n      let selected = squares.filter(cs => cs.selected);\r\n      if(selected.find(s => s.solvedGroup)) {\r\n        throw new Error(\"Selected square is already solved\");\r\n      }\r\n\r\n      if( selected.length === groupSize ) {\r\n        selected.forEach(s => s.selected = false);\r\n\r\n        if (selected.every(s => s.answerGroup === selected[0].answerGroup)) {\r\n          const solvedGroup = lastSolvedGroup + 1;\r\n          setLastSolvedGroup(solvedGroup);\r\n\r\n          selected.forEach(s => s.solvedGroup = solvedGroup);\r\n          positionSquaresInSolvedGroup(squares, solvedGroup);\r\n\r\n           // If the last but one group has been solve, then the last group \r\n          // must also be solved.\r\n          if(solvedGroup + 1 === nGroups) {\r\n            squares.forEach(s => {\r\n              if(!s.solvedGroup) {\r\n                s.solvedGroup = nGroups;\r\n              }\r\n            })\r\n            setLastSolvedGroup(nGroups);\r\n          }\r\n        } else {\r\n          selected.forEach(s => s.badGuess = true);\r\n        }\r\n      }\r\n\r\n      setCoreSquares(squares);\r\n    }\r\n  }\r\n\r\n  const hasGuess = Boolean(coreSquares.find(s => (s.selected || s.badGuess)));\r\n  const hasBadGuess = Boolean(coreSquares.find(s => s.badGuess));\r\n\r\n  const doClearGuess = () => {\r\n    let newSquares = [...coreSquares];\r\n    newSquares.forEach(s => {\r\n      s.badGuess = false;\r\n      s.selected = false;\r\n    });\r\n    setCoreSquares(newSquares);\r\n  }\r\n\r\n  if(cluesSetByURL) {\r\n    return (<SolvingArea\r\n      coreSquares={coreSquares} \r\n      hasGuess={hasGuess}\r\n      hasBadGuess={hasBadGuess}\r\n      clueSelected={clueSelected}\r\n      doClearGuess={doClearGuess}\r\n    />);\r\n  }\r\n\r\n  const ResultArea = () => {\r\n    const shuffled = shuffleArray([...coreSquares]);\r\n    const urlParams = makeUrlParams(shuffled);\r\n    const url = window.location.href + \"?\" + urlParams.toString();\r\n    return (\r\n      <div>\r\n        <Wall coreSquares={coreSquares} />\r\n        <div> <a href={url} target=\"blank\">Randomised (Playable)</a> </div>\r\n      </div>);\r\n  }\r\n\r\n  const recordClues = (clues: Array<string> | null) => {\r\n      if(clues) {\r\n        cluesSet(clues);\r\n      } else {\r\n        setCluesEntered(false);\r\n      }\r\n  }\r\n\r\n  return (\r\n    <div className=\"onlyconnect\">\r\n      <SettingArea recordClues={recordClues} />\r\n      {cluesEntered ? <ResultArea/> : null}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}