{"version":3,"sources":["basics.tsx","wall.tsx","solving-area.tsx","tools.ts","url-and-storage-tools.tsx","setting-area.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["filterClue","clue","replace","makeCoreSquare","answerGroup","selected","badGuess","solvedGroup","validSolvedGroup","group","Square","coreSquare","index","onSelect","className","console","log","onClick","Wall","coreSquares","map","cs","toString","SolvingArea","hasBadGuess","clueSelected","doClearGuess","doRestart","ClearGuessButton","type","RestartButton","DumbEncrypt","val","encrypted","this","prime","Math","floor","random","undoInt","Error","squaresSetByURL","cluesSetByURL","localStorageKey","groupSize","length","sq","join","processURLParams","urlParams","URLSearchParams","window","location","search","urlClues","get","clues","split","unpackURLClues","urlSolutionGroups","values","urlKey","combinedValues","parseInt","i","value","push","reverse","g","filter","k","unpackURLSolutionGroups","alert","groupNo","n","s","checkSolvedGroup","storeSquares","squares","localStorage","removeItem","forEach","stringified","JSON","stringify","setItem","getStoredSquares","result","rawStorage","getItem","parse","doGetStoredSquares","clearAllStorage","clear","trimmed","words","t","trim","SettingArea","recordClues","useState","recordedText","setRecordedText","errorMessage","setErrorMessage","ErrorMessage","cols","rows","onChange","event","target","spaceSeparated","commaSeparated","text","getCluesCommaSeperated","groupFromIndex","startingSetupData","storedSquares","startingSquares","startingSetup","positionSquaresInSolvedGroup","groupBeingProcessed","positional","current","sanityCheckSolvedGroups","moveTo","findIndex","App","setCoreSquares","cluesEntered","setCluesEntered","useEffect","document","title","Boolean","find","every","lastSolvedGroup","newSquares","reload","ResultArea","append","slice","key","doInt","makeUrlParams","array","j","shuffleArray","url","href","coreSquares_","cluesSet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5931cb56.chunk.js","sourcesContent":["\r\n\r\n// Remove unsuitable characeters from clue\r\nfunction filterClue(clue: string) {\r\n  // For now at least just remove '~' as that has special meaning in\r\n  // the URLs that are generated. \r\n  return clue.replace(/~/g, \"\");\r\n}\r\n\r\n\r\n// Warning: Change this interface is likely to break any recorded data\r\ninterface CoreSquare {\r\n  readonly answerGroup: number;\r\n  clue: string;\r\n  selected: boolean;\r\n  badGuess: boolean;\r\n  solvedGroup: number | null;\r\n}\r\n\r\n\r\nfunction makeCoreSquare(answerGroup: number, clue: string = \"\") : CoreSquare {\r\n  return {\r\n    answerGroup: answerGroup,\r\n    clue: filterClue(clue),\r\n    selected: false,\r\n    badGuess: false,\r\n    solvedGroup: null,\r\n  }\r\n}\r\n\r\n\r\nexport type {CoreSquare};\r\nexport {makeCoreSquare};\r\nexport const groupSize = 4;\r\nexport const nGroups = 4;\r\nexport const nSquares = groupSize * nGroups;\r\n\r\nexport function validSolvedGroup(group: number) {\r\n  return group >= 1 && group <= nGroups;\r\n}","import React, { FC } from 'react';\r\nimport {validSolvedGroup} from './basics';\r\n\r\ninterface CoreSquare {\r\n    clue: string;\r\n    selected: boolean;\r\n    badGuess: boolean;\r\n    solvedGroup: number | null;\r\n};\r\n\r\ninterface SquareProps {\r\n    coreSquare: CoreSquare;\r\n    index: number;\r\n    onSelect?: (index:number) => void;\r\n}\r\n\r\nconst Square : FC<SquareProps> = ({coreSquare, index, onSelect}: SquareProps) => {\r\n  \r\n    const onClick: () => void = () => {\r\n        if(onSelect)\r\n            onSelect(index)\r\n    };\r\n\r\n    let className = \"square\";\r\n    if (coreSquare.selected) {\r\n        className += \" selected\";\r\n    }\r\n    if (coreSquare.badGuess) {\r\n        className += \" bad-guess\";\r\n    }\r\n\r\n    const solvedGroup = coreSquare.solvedGroup;\r\n    if (solvedGroup !== null) {\r\n        if(validSolvedGroup(solvedGroup)) {\r\n            className += \" group\" + coreSquare.solvedGroup;\r\n        } else {\r\n            console.log(\"Invalid solved group for\", coreSquare);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onClick={onClick}\r\n            className={className}\r\n        >\r\n            {coreSquare.clue}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\ninterface WallProps {\r\n    coreSquares: Array<CoreSquare>,\r\n    onSelect?: (index: number) => void,\r\n};\r\n\r\nconst Wall: FC<WallProps> = ({ coreSquares, onSelect }: WallProps) => {\r\n    return (\r\n        <div className=\"wall\">\r\n            {coreSquares.map((cs: CoreSquare, index: number) => (\r\n                <Square \r\n                    key={index.toString()} \r\n                    index={index}\r\n                    coreSquare={cs}\r\n                    onSelect={onSelect}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wall;\r\nexport type { CoreSquare }","import React from 'react';\r\nimport Wall, { CoreSquare } from './wall'\r\n\r\n\r\ninterface SolvingAreaProps {\r\n    coreSquares: Array<CoreSquare>\r\n    hasBadGuess: boolean;\r\n    clueSelected: (index: number) => void,\r\n    doClearGuess: ()=>void;\r\n    doRestart: ()=>void;\r\n}\r\n\r\nfunction SolvingArea({coreSquares, hasBadGuess, clueSelected, doClearGuess, doRestart} : SolvingAreaProps) {\r\n\r\n     const ClearGuessButton = () => (\r\n        <button type=\"button\" onClick={doClearGuess}>\r\n            Clear guess\r\n        </button>\r\n    );\r\n    const RestartButton = () => (\r\n        <button className=\"restart-button\" type=\"button\" onClick={doRestart}>\r\n            Restart\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <div className=\"solving-area\">\r\n            <Wall\r\n                coreSquares={coreSquares}\r\n                onSelect={clueSelected}\r\n            />\r\n            <div className=\"solving-controls\">\r\n                <div>\r\n                    <ClearGuessButton/>\r\n                    {hasBadGuess ? <div>Wrong!</div> : null}\r\n                </div>\r\n                <RestartButton/>\r\n            </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default SolvingArea;","// Shuffle array in place. Return the shuffled array\r\nexport function shuffleArray<T>(array: Array<T>) {\r\n    // From https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n  \r\nexport  class DumbEncrypt {\r\n    private static readonly  prime = 19793;\r\n  \r\n    static doInt(val: number) {\r\n      const encrypted = val * this.prime +\r\n        Math.floor(Math.random() * this.prime);\r\n  \r\n      if(this.undoInt(encrypted) !== val) {\r\n        throw new Error(`DumbEncypt.doInt Cannot encrypt ${val}`);\r\n      } \r\n      return encrypted;\r\n    }\r\n  \r\n    static undoInt(val: number) {\r\n      return Math.floor(val / this.prime);\r\n    }\r\n  };\r\n\r\n","import {\r\n  CoreSquare, makeCoreSquare,\r\n  nSquares, groupSize, nGroups, validSolvedGroup\r\n} from './basics';\r\nimport { DumbEncrypt } from './tools';\r\n\r\nlet squaresSetByURL: Array<CoreSquare> = [];\r\nlet cluesSetByURL = false;\r\n\r\n// computing every time is inefficient.\r\nfunction localStorageKey(): string {\r\n  if (squaresSetByURL.length !== nSquares) {\r\n    throw new Error(\"Cannot find storage key - clue words are not set\");\r\n  }\r\n\r\n  const key = squaresSetByURL.map(sq => sq.clue).join();\r\n  return key;\r\n}\r\n\r\nfunction makeUrlParams(squares: Array<CoreSquare>) {\r\n\r\n  let urlParams = new URLSearchParams();\r\n\r\n  let clues = \"\";\r\n  squares.forEach(s => clues += s.clue + \"~\");\r\n  urlParams.append(\"clues\", clues.slice(0, -1));\r\n\r\n  let key = 0;\r\n  squares.forEach(s => key = key * nGroups + s.answerGroup);\r\n  const encrypted = DumbEncrypt.doInt(key);\r\n  urlParams.append(\"key\", encrypted.toString());\r\n  return urlParams;\r\n}\r\n\r\nfunction unpackURLClues(urlParams: URLSearchParams) {\r\n\r\n  const urlClues = urlParams.get(\"clues\");\r\n  if (urlClues) {\r\n    const clues = urlClues.split(\"~\");\r\n\r\n    if (clues.length === nSquares) {\r\n      return clues;\r\n    } else {\r\n      console.log(\"Did not find the expected number of clues\", clues);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction unpackURLSolutionGroups(urlParams: URLSearchParams) {\r\n  let values: Array<number> | null = null;\r\n\r\n  const urlKey = urlParams.get(\"key\");\r\n  if (urlKey) {\r\n\r\n    let combinedValues = DumbEncrypt.undoInt(parseInt(urlKey));\r\n\r\n    values = [];\r\n    for (let i = 0; i < nSquares; ++i) {\r\n      const value = combinedValues % nGroups;\r\n      combinedValues = (combinedValues - value) / nGroups;\r\n      values.push(value);\r\n    }\r\n    values.reverse();\r\n\r\n    // Check the values.  There should be groupSize values for each group.\r\n    for (let g = 0; values && g < nGroups; ++g) {\r\n      const matched = values.filter(k => k === g);\r\n      if (matched.length !== groupSize) {\r\n        console.log(\"Cannot interpret urlKey\", urlKey);\r\n        values = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\n// KLUDGE - Use to set gloabls. Would be better called in the App.\r\nfunction processURLParams() {\r\n\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n\r\n  const urlClues = unpackURLClues(urlParams);\r\n  const urlSolutionGroups = unpackURLSolutionGroups(urlParams);\r\n\r\n  cluesSetByURL = false;\r\n  if (urlClues && urlSolutionGroups) {\r\n    cluesSetByURL = true;\r\n\r\n    for (let i = 0; i < nSquares; ++i) {\r\n      squaresSetByURL.push(\r\n        makeCoreSquare(urlSolutionGroups[i], urlClues[i])\r\n      );\r\n    }\r\n  } else if (!urlClues && !urlSolutionGroups) {\r\n    for (let groupNo = 0; groupNo < nGroups; ++groupNo) {\r\n      for (let n = 0; n < groupSize; ++n) {\r\n        let s = makeCoreSquare(groupNo);\r\n        squaresSetByURL.push(s);\r\n      }\r\n    }\r\n  } else {\r\n    console.log(\"window.location.search\", window.location.search,\r\n      \"\\nurlClue\", urlClues,\r\n      \"\\nurlSolutionGroups\", urlSolutionGroups\r\n    );\r\n\r\n    alert(\"Could not understand URL parameters\");\r\n  }\r\n\r\n}\r\n\r\nfunction checkSolvedGroup(sq: CoreSquare) {\r\n  if (sq.solvedGroup !== null && !validSolvedGroup(sq.solvedGroup)) {\r\n    throw new Error(\"Bad solved group in recorded square\");\r\n  }\r\n}\r\n\r\nfunction storeSquares(squares: Array<CoreSquare> | null) {\r\n  if (squares === null) {\r\n    localStorage.removeItem(localStorageKey());\r\n  } else {\r\n    squares.forEach(checkSolvedGroup); // Temporary: To help with finding a bug\r\n\r\n    const stringified = JSON.stringify(squares);\r\n    //console.log(stringified);\r\n    localStorage.setItem(localStorageKey(), stringified);\r\n  }\r\n}\r\n\r\nfunction doGetStoredSquares(): Array<CoreSquare> | null {\r\n  const rawStorage = localStorage.getItem(localStorageKey());\r\n\r\n  if (rawStorage === null) {\r\n    return null;\r\n  }\r\n\r\n  let squares: Array<any> = JSON.parse(rawStorage);\r\n  if (!squares) {\r\n    return null;\r\n  }\r\n\r\n  if (squares.length !== nSquares) {\r\n    throw new Error(\"Stored array does not have the expected length\");\r\n  }\r\n\r\n  //Basic sanity check\r\n  squares.forEach(sq => checkSolvedGroup(sq));\r\n\r\n  return squares;\r\n\r\n}\r\n\r\nfunction getStoredSquares() {\r\n  let result = null;\r\n  try {\r\n    result = doGetStoredSquares();\r\n  } catch {\r\n    alert(\"Error reading stored data\");\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction clearAllStorage() {\r\n  localStorage.clear();\r\n}\r\n\r\nfunction startingSetup() {\r\n  processURLParams();\r\n\r\n  const storedSquares = getStoredSquares();\r\n  return {\r\n    cluesSetByURL: cluesSetByURL,\r\n    startingSquares: storedSquares || squaresSetByURL,\r\n  }\r\n}\r\n\r\nexport { startingSetup, makeUrlParams, storeSquares, clearAllStorage }\r\n\r\n","import React, { useState } from 'react';\r\nimport { clearAllStorage } from './url-and-storage-tools'\r\n\r\nfunction trimmed(words: Array<string>) {\r\n    console.log(\"Pre-trimmed\", words);\r\n\r\n    let result: Array<string> = [];\r\n    for (let i in words) {\r\n        const t = words[i].trim();\r\n        if (t) {\r\n            result.push(t);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction getCluesSpaceSeperated(text: string) {\r\n    return trimmed(text.split(/[,\\s]/));\r\n}\r\n\r\n// Find non-empty clues separated by commas or newlines\r\nfunction getCluesCommaSeperated(text: string) {\r\n    return trimmed(text.split(/[,\\n]/));\r\n}\r\n\r\ninterface SettingAreaProps {\r\n    recordClues: (clues: Array<string> | null) => void;\r\n}\r\nfunction SettingArea({ recordClues }: SettingAreaProps) {\r\n    const [recordedText, setRecordedText] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n\r\n    function textAreaChange(event: any) {\r\n        setRecordedText(event.target.value);\r\n    }\r\n\r\n    function onDone() {\r\n        setErrorMessage(\"\");\r\n\r\n        const spaceSeparated = getCluesSpaceSeperated(recordedText);\r\n        console.log(\"Space separated\", spaceSeparated);\r\n        if (spaceSeparated.length === 16) {\r\n            recordClues(spaceSeparated);\r\n            return;\r\n        }\r\n\r\n        const commaSeparated = getCluesCommaSeperated(recordedText);\r\n        console.log(\"Comma separated\", commaSeparated);\r\n\r\n        if (commaSeparated.length === 16) {\r\n            recordClues(commaSeparated);\r\n            return;\r\n        }\r\n\r\n        setErrorMessage(`Did not find 16 clues: \r\n            ${spaceSeparated.length} found with space seperation.\r\n            ${commaSeparated.length} found with comma-seperation.`\r\n        );\r\n\r\n\r\n    }\r\n\r\n    const ErrorMessage = () => {\r\n        if (errorMessage) {\r\n            return <div>{\"Error: \" + errorMessage}</div>\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"setting-area\" >\r\n            <p>Enter clues.  These can be single words, or words and phrases seperated by commas</p>\r\n            <textarea\r\n                cols={50}\r\n                rows={4}\r\n                onChange={textAreaChange}\r\n            />\r\n\r\n            <div className=\"setting-area-buttons\">\r\n                <button className=\"done-button\" onClick={onDone}>Done</button>\r\n                <button className=\"clear-stored-solutions-button\" onClick={clearAllStorage}>\r\n                    Clear stored solutions\r\n            </button>\r\n            </div>\r\n            <ErrorMessage />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SettingArea;","// TO DO:  Tidy this code so it less of a dogs dinner.\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { CoreSquare, makeCoreSquare, nGroups, groupSize } from './basics';\r\nimport SolvingArea from './solving-area'\r\nimport SettingArea from './setting-area'\r\nimport { shuffleArray } from './tools';\r\n\r\nimport Wall from './wall';\r\nimport {startingSetup, makeUrlParams, storeSquares } from './url-and-storage-tools';\r\nimport './App.css';\r\n\r\n\r\nfunction groupFromIndex(index: number) {\r\n  return Math.floor(index / groupSize) + 1;\r\n}\r\n\r\nconst startingSetupData = startingSetup();\r\nlet { startingSquares, cluesSetByURL } = startingSetupData;\r\n\r\nfunction lastSolvedGroup(squares: Array<CoreSquare>) {\r\n  for(let group = nGroups; group > 0; --group) {\r\n      if(squares.find(s => s && s.solvedGroup === group)) {\r\n        return group;\r\n      }\r\n  }\r\n  return 0;\r\n}\r\n\r\n// Check that \r\n// - Squares in solved groups below 'groupBeingProcessed' are correctly placed\r\n// = No square is in a solved group greated than  'groupBeingProcessed'\r\n// Throw an error the if check fails.\r\nfunction sanityCheckSolvedGroups(squares: Array<CoreSquare>, groupBeingProcessed: number) {\r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const positional = groupFromIndex(index);\r\n    const current = squares[index].solvedGroup;\r\n    if(positional < groupBeingProcessed) {\r\n        if(positional !== current) {\r\n          throw new Error(`square ${index} is not in solved group ${positional}`)\r\n        }\r\n\r\n        if (current > groupBeingProcessed) {\r\n          throw new Error(`square ${index} is in unexpected solved fron ${current}`)\r\n        }\r\n    }\r\n  }\r\n}\r\nfunction positionSquaresInSolvedGroup(squares: Array<CoreSquare>, groupNo: number) {\r\n\r\n  sanityCheckSolvedGroups(squares, groupNo);\r\n\r\n  // Relies on properties cheched above. \r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const sq = squares[index];\r\n    if (sq.solvedGroup === groupNo && groupFromIndex(index) !== groupNo) {\r\n      const moveTo = squares.findIndex(s => !s.solvedGroup); // Inefficient\r\n      if (groupFromIndex(moveTo) !== groupNo) {\r\n        throw new Error(\"Bah! Something has gone wrong\");\r\n      }\r\n      [squares[index], squares[moveTo]] = [squares[moveTo], squares[index]];\r\n    }\r\n  }\r\n}\r\n\r\nconst App: FC<{}> = () => {\r\n\r\n  const [coreSquares, setCoreSquares] = useState(startingSquares);\r\n  const [cluesEntered, setCluesEntered] = useState(false);\r\n\r\n  useEffect(() => { document.title = \"OnlyConnect\" });\r\n\r\n  const cluesSet = (clues: Array<string>) => {\r\n    const coreSquares_ = clues.map((clue, index) => {\r\n      const group = Math.floor(index / 4);\r\n      return makeCoreSquare(group, clue);\r\n    });\r\n    setCoreSquares(coreSquares_);\r\n    setCluesEntered(true);\r\n  }\r\n\r\n\r\n  const clueSelected: (index: number) => void = (index) => {\r\n\r\n    // Ignore squares that have already been solved.\r\n    if (cluesSetByURL && !coreSquares[index].solvedGroup) {\r\n      let squares = [...coreSquares];\r\n      squares.forEach(s => s.badGuess = false);\r\n      squares[index].selected = !squares[index].selected;\r\n\r\n      let selected = squares.filter(cs => cs.selected);\r\n      if (selected.find(s => s.solvedGroup)) {\r\n        throw new Error(\"Selected square is already solved\");\r\n      }\r\n\r\n      if (selected.length === groupSize) {\r\n        selected.forEach(s => s.selected = false);\r\n\r\n        if (selected.every(s => s.answerGroup === selected[0].answerGroup)) {\r\n          // The selected sqaures are in the same group, so the group has been solved.\r\n\r\n          const solvedGroup = lastSolvedGroup(squares) + 1;\r\n\r\n\r\n          selected.forEach(s => s.solvedGroup = solvedGroup);\r\n          positionSquaresInSolvedGroup(squares, solvedGroup);\r\n\r\n          // If the last but one group has been solve, then the last group \r\n          // must also be solved.\r\n          if (solvedGroup + 1 === nGroups) {\r\n            squares.forEach(s => {\r\n              if (!s.solvedGroup) {\r\n                s.solvedGroup = nGroups;\r\n              }\r\n            })\r\n\r\n\r\n          }\r\n        } else {\r\n          selected.forEach(s => s.badGuess = true);\r\n        }\r\n      }\r\n      storeSquares(squares);\r\n      setCoreSquares(squares);\r\n    }\r\n  }\r\n\r\n  const hasBadGuess = Boolean(coreSquares.find(s => s.badGuess));\r\n\r\n  const doClearGuess = () => {\r\n    let newSquares = [...coreSquares];\r\n    newSquares.forEach(s => {\r\n      s.badGuess = false;\r\n      s.selected = false;\r\n    });\r\n    setCoreSquares(newSquares);\r\n  }\r\n\r\n  const doRestart = () => {\r\n    storeSquares(null);\r\n    window.location.reload();\r\n  }\r\n\r\n  if (cluesSetByURL) {\r\n    return (<SolvingArea\r\n      coreSquares={coreSquares}\r\n      hasBadGuess={hasBadGuess}\r\n      clueSelected={clueSelected}\r\n      doClearGuess={doClearGuess}\r\n      doRestart={doRestart}\r\n    />);\r\n  }\r\n\r\n  const ResultArea = () => {\r\n    const shuffled = shuffleArray([...coreSquares]);\r\n    const urlParams = makeUrlParams(shuffled);\r\n    const url = window.location.href + \"?\" + urlParams.toString();\r\n    return (\r\n      <div>\r\n        <Wall coreSquares={coreSquares} />\r\n        <div> <a href={url} target=\"blank\">Randomised (Playable)</a> </div>\r\n      </div>);\r\n  }\r\n\r\n  const recordClues = (clues: Array<string> | null) => {\r\n    if (clues) {\r\n      cluesSet(clues);\r\n    } else {\r\n      setCluesEntered(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"setting-area\">\r\n      <SettingArea recordClues={recordClues} />\r\n      {cluesEntered ? <ResultArea /> : null}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}