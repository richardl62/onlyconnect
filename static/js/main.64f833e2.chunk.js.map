{"version":3,"sources":["basics.tsx","wall.tsx","solving-area.tsx","setting-area.tsx","tools.ts","url-and-storage-tools.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["filterClue","clue","replace","makeCoreSquare","answerGroup","selected","badGuess","solvedGroup","validSolvedGroup","group","Square","coreSquare","index","onSelect","className","console","log","onClick","Wall","coreSquares","map","cs","toString","SolvingArea","hasBadGuess","clueSelected","doClearGuess","doRestart","ClearGuessButton","type","RestartButton","trimmed","words","result","i","t","trim","push","SettingArea","recordClues","useState","recordedText","setRecordedText","errorMessage","setErrorMessage","ErrorMessage","cols","rows","onChange","event","target","value","spaceSeparated","split","length","commaSeparated","text","getCluesCommaSeperated","DumbEncrypt","val","encrypted","this","prime","Math","floor","random","undoInt","Error","squaresSetByURL","cluesSetByURL","localStorageKey","groupSize","sq","join","processURLParams","urlParams","URLSearchParams","window","location","search","urlClues","get","clues","unpackURLClues","urlSolutionGroups","values","urlKey","combinedValues","parseInt","reverse","g","filter","k","unpackURLSolutionGroups","alert","groupNo","n","s","checkSolvedGroup","storeSquares","squares","localStorage","removeItem","forEach","stringified","JSON","stringify","setItem","getStoredSquares","rawStorage","getItem","parse","doGetStoredSquares","groupFromIndex","startingSetupData","storedSquares","startingSquares","startingSetup","positionSquaresInSolvedGroup","groupBeingProcessed","positional","current","sanityCheckSolvedGroups","moveTo","findIndex","App","setCoreSquares","cluesEntered","setCluesEntered","useEffect","document","title","Boolean","find","every","lastSolvedGroup","newSquares","reload","ResultArea","append","slice","key","doInt","makeUrlParams","array","j","shuffleArray","url","href","coreSquares_","cluesSet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.64f833e2.chunk.js","sourcesContent":["\r\n\r\n// Remove unsuitable characeters from clue\r\nfunction filterClue(clue: string) {\r\n  // For now at least just remove '~' as that has special meaning in\r\n  // the URLs that are generated. \r\n  return clue.replace(/~/g, \"\");\r\n}\r\n\r\n\r\n// Warning: Change this interface is likely to break any recorded data\r\ninterface CoreSquare {\r\n  readonly answerGroup: number;\r\n  clue: string;\r\n  selected: boolean;\r\n  badGuess: boolean;\r\n  solvedGroup: number | null;\r\n}\r\n\r\n\r\nfunction makeCoreSquare(answerGroup: number, clue: string = \"\") : CoreSquare {\r\n  return {\r\n    answerGroup: answerGroup,\r\n    clue: filterClue(clue),\r\n    selected: false,\r\n    badGuess: false,\r\n    solvedGroup: null,\r\n  }\r\n}\r\n\r\n\r\nexport type {CoreSquare};\r\nexport {makeCoreSquare};\r\nexport const groupSize = 4;\r\nexport const nGroups = 4;\r\nexport const nSquares = groupSize * nGroups;\r\n\r\nexport function validSolvedGroup(group: number) {\r\n  return group >= 1 && group <= nGroups;\r\n}","import React, { FC } from 'react';\r\nimport {validSolvedGroup} from './basics';\r\n\r\ninterface CoreSquare {\r\n    clue: string;\r\n    selected: boolean;\r\n    badGuess: boolean;\r\n    solvedGroup: number | null;\r\n};\r\n\r\ninterface SquareProps {\r\n    coreSquare: CoreSquare;\r\n    index: number;\r\n    onSelect?: (index:number) => void;\r\n}\r\n\r\nconst Square : FC<SquareProps> = ({coreSquare, index, onSelect}: SquareProps) => {\r\n  \r\n    const onClick: () => void = () => {\r\n        if(onSelect)\r\n            onSelect(index)\r\n    };\r\n\r\n    let className = \"square\";\r\n    if (coreSquare.selected) {\r\n        className += \" selected\";\r\n    }\r\n    if (coreSquare.badGuess) {\r\n        className += \" bad-guess\";\r\n    }\r\n\r\n    const solvedGroup = coreSquare.solvedGroup;\r\n    if (solvedGroup !== null) {\r\n        if(validSolvedGroup(solvedGroup)) {\r\n            className += \" group\" + coreSquare.solvedGroup;\r\n        } else {\r\n            console.log(\"Invalid solved group for\", coreSquare);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onClick={onClick}\r\n            className={className}\r\n        >\r\n            {coreSquare.clue}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\ninterface WallProps {\r\n    coreSquares: Array<CoreSquare>,\r\n    onSelect?: (index: number) => void,\r\n};\r\n\r\nconst Wall: FC<WallProps> = ({ coreSquares, onSelect }: WallProps) => {\r\n    return (\r\n        <div className=\"wall\">\r\n            {coreSquares.map((cs: CoreSquare, index: number) => (\r\n                <Square \r\n                    key={index.toString()} \r\n                    index={index}\r\n                    coreSquare={cs}\r\n                    onSelect={onSelect}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wall;\r\nexport type { CoreSquare }","import React from 'react';\r\nimport Wall, { CoreSquare } from './wall'\r\n\r\n\r\ninterface SolvingAreaProps {\r\n    coreSquares: Array<CoreSquare>\r\n    hasBadGuess: boolean;\r\n    clueSelected: (index: number) => void,\r\n    doClearGuess: ()=>void;\r\n    doRestart: ()=>void;\r\n}\r\n\r\nfunction SolvingArea({coreSquares, hasBadGuess, clueSelected, doClearGuess, doRestart} : SolvingAreaProps) {\r\n\r\n     const ClearGuessButton = () => (\r\n        <button type=\"button\" onClick={doClearGuess}>\r\n            Clear guess\r\n        </button>\r\n    );\r\n    const RestartButton = () => (\r\n        <button className=\"restart-button\" type=\"button\" onClick={doRestart}>\r\n            Restart\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <div className=\"solving-area\">\r\n            <Wall\r\n                coreSquares={coreSquares}\r\n                onSelect={clueSelected}\r\n            />\r\n            <div className=\"solving-controls\">\r\n                <div>\r\n                    <ClearGuessButton/>\r\n                    {hasBadGuess ? <div>Wrong!</div> : null}\r\n                </div>\r\n                <RestartButton/>\r\n            </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default SolvingArea;","import React, {useState} from 'react';\r\n\r\nfunction trimmed(words: Array<string>) {\r\n    console.log(\"Pre-trimmed\", words);\r\n\r\n    let result : Array<string> = [];\r\n    for(let i in words) {\r\n        const t = words[i].trim();\r\n        if (t) {\r\n            result.push(t);\r\n        } \r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction getCluesSpaceSeperated(text: string) {\r\n    return trimmed(text.split(/[,\\s]/));\r\n}\r\n\r\n// Find non-empty clues separated by commas or newlines\r\nfunction getCluesCommaSeperated(text: string) {\r\n    return trimmed(text.split(/[,\\n]/));\r\n}\r\n\r\ninterface SettingAreaProps {\r\n    recordClues: (clues: Array<string> | null) => void;\r\n}\r\nfunction SettingArea({recordClues} : SettingAreaProps)\r\n{\r\n    const [recordedText, setRecordedText] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n\r\n    function textAreaChange(event: any) {\r\n        setRecordedText(event.target.value);\r\n    }\r\n\r\n    function onDone() {\r\n        setErrorMessage(\"\");\r\n\r\n        const spaceSeparated = getCluesSpaceSeperated(recordedText);\r\n        console.log(\"Space separated\", spaceSeparated);\r\n        if(spaceSeparated.length === 16) {\r\n            recordClues(spaceSeparated);\r\n            return;\r\n        } \r\n        \r\n        const commaSeparated = getCluesCommaSeperated(recordedText);\r\n        console.log(\"Comma separated\", commaSeparated);\r\n\r\n        if(commaSeparated.length === 16) {\r\n            recordClues(commaSeparated);\r\n            return;\r\n        } \r\n\r\n        setErrorMessage(`Did not find 16 clues: \r\n            ${spaceSeparated.length} found with space seperation.\r\n            ${commaSeparated.length} found with comma-seperation.`     \r\n        );\r\n\r\n        \r\n    }\r\n\r\n    const ErrorMessage = () => {\r\n        if(errorMessage) {\r\n            return <div>{\"Error: \" + errorMessage}</div>\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    return (<>\r\n        <div>\r\n            <p>Enter clues.  These can be single words, or words and phrases seperated by commas</p>\r\n            <textarea  \r\n                cols={50}\r\n                rows={4}\r\n                onChange={textAreaChange}\r\n            />\r\n        </div>\r\n        <button className=\"done-button\" onClick={onDone}>Done</button>\r\n        <ErrorMessage/>\r\n    </>);\r\n}\r\n\r\nexport default SettingArea;","// Shuffle array in place. Return the shuffled array\r\nexport function shuffleArray<T>(array: Array<T>) {\r\n    // From https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n  \r\nexport  class DumbEncrypt {\r\n    private static readonly  prime = 19793;\r\n  \r\n    static doInt(val: number) {\r\n      const encrypted = val * this.prime +\r\n        Math.floor(Math.random() * this.prime);\r\n  \r\n      if(this.undoInt(encrypted) !== val) {\r\n        throw new Error(`DumbEncypt.doInt Cannot encrypt ${val}`);\r\n      } \r\n      return encrypted;\r\n    }\r\n  \r\n    static undoInt(val: number) {\r\n      return Math.floor(val / this.prime);\r\n    }\r\n  };\r\n\r\n","import {\r\n  CoreSquare, makeCoreSquare,\r\n  nSquares, groupSize, nGroups, validSolvedGroup\r\n} from './basics';\r\nimport { DumbEncrypt } from './tools';\r\n\r\nlet squaresSetByURL: Array<CoreSquare> = [];\r\nlet cluesSetByURL = false;\r\n\r\n// computing every time is inefficient.\r\nfunction localStorageKey() : string {\r\n  if(squaresSetByURL.length !== nSquares) {\r\n    throw new Error(\"Cannot find storage key - clue words are not set\");\r\n  }\r\n\r\n  const key = squaresSetByURL.map(sq => sq.clue).join();\r\n  return key;\r\n}\r\n\r\nfunction makeUrlParams(squares: Array<CoreSquare>) {\r\n\r\n  let urlParams = new URLSearchParams();\r\n\r\n  let clues = \"\";\r\n  squares.forEach(s => clues += s.clue + \"~\");\r\n  urlParams.append(\"clues\", clues.slice(0, -1));\r\n\r\n  let key = 0;\r\n  squares.forEach(s => key = key * nGroups + s.answerGroup);\r\n  const encrypted = DumbEncrypt.doInt(key);\r\n  urlParams.append(\"key\", encrypted.toString());\r\n  return urlParams;\r\n}\r\n\r\nfunction unpackURLClues(urlParams: URLSearchParams) {\r\n\r\n  const urlClues = urlParams.get(\"clues\");\r\n  if (urlClues) {\r\n    const clues = urlClues.split(\"~\");\r\n    \r\n    if (clues.length === nSquares) {\r\n      return clues;\r\n    } else {\r\n      console.log(\"Did not find the expected number of clues\", clues);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction unpackURLSolutionGroups(urlParams: URLSearchParams) {\r\n  let values: Array<number> | null = null;\r\n\r\n  const urlKey = urlParams.get(\"key\");\r\n  if (urlKey) {\r\n\r\n    let combinedValues = DumbEncrypt.undoInt(parseInt(urlKey));\r\n\r\n    values = [];\r\n    for (let i = 0; i < nSquares; ++i) {\r\n      const value = combinedValues % nGroups;\r\n      combinedValues = (combinedValues - value) / nGroups;\r\n      values.push(value);\r\n    }\r\n    values.reverse();\r\n\r\n    // Check the values.  There should be groupSize values for each group.\r\n    for (let g = 0; values && g < nGroups; ++g) {\r\n      const matched = values.filter(k => k === g);\r\n      if (matched.length !== groupSize) {\r\n        console.log(\"Cannot interpret urlKey\", urlKey);\r\n        values = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\n// KLUDGE - Use to set gloabls. Would be better called in the App.\r\nfunction processURLParams() {\r\n\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n\r\n  const urlClues = unpackURLClues(urlParams);\r\n  const urlSolutionGroups = unpackURLSolutionGroups(urlParams);\r\n\r\n  cluesSetByURL = false;\r\n  if (urlClues && urlSolutionGroups) {\r\n    cluesSetByURL = true;\r\n\r\n    for (let i = 0; i < nSquares; ++i) {\r\n      squaresSetByURL.push(\r\n        makeCoreSquare(urlSolutionGroups[i], urlClues[i])\r\n      );\r\n    }\r\n  }\r\n  else {\r\n    if (urlParams.toString()) {\r\n      alert(\"Could not understand URL parameters\");\r\n    }\r\n\r\n    for (let groupNo = 0; groupNo < nGroups; ++groupNo) {\r\n      for (let n = 0; n < groupSize; ++n) {\r\n        let s = makeCoreSquare(groupNo);\r\n        squaresSetByURL.push(s);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkSolvedGroup(sq: CoreSquare) {\r\n  if (sq.solvedGroup !== null && !validSolvedGroup(sq.solvedGroup)) {\r\n    throw new Error(\"Bad solved group in recorded square\");\r\n  }\r\n}\r\n\r\nfunction storeSquares(squares: Array<CoreSquare> | null) {\r\n  if (squares === null) {\r\n    localStorage.removeItem(localStorageKey());\r\n  } else {\r\n    squares.forEach(checkSolvedGroup); // Temporary: To help with finding a bug\r\n\r\n    const stringified = JSON.stringify(squares);\r\n    //console.log(stringified);\r\n    localStorage.setItem(localStorageKey(), stringified);\r\n  }\r\n}\r\n\r\nfunction doGetStoredSquares(): Array<CoreSquare> | null {\r\n  const rawStorage = localStorage.getItem(localStorageKey());\r\n\r\n  if (rawStorage === null) {\r\n    return null;\r\n  }\r\n\r\n  let squares: Array<any> = JSON.parse(rawStorage);\r\n  if (!squares) {\r\n    return null;\r\n  }\r\n\r\n  if (squares.length !== nSquares) {\r\n    throw new Error(\"Stored array does not have the expected length\");\r\n  }\r\n\r\n  //Basic sanity check\r\n  squares.forEach(sq => checkSolvedGroup(sq));\r\n\r\n  return squares;\r\n\r\n}\r\n\r\nfunction getStoredSquares() {\r\n  let result = null;\r\n  try {\r\n    result = doGetStoredSquares();\r\n  } catch {\r\n    alert(\"Error reading stored data\");\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction clearAllStorage() {\r\n  localStorage.clear();\r\n}\r\n\r\nfunction startingSetup() {\r\n  processURLParams();\r\n\r\n  const storedSquares = getStoredSquares();\r\n  return {\r\n    cluesSetByURL: cluesSetByURL,\r\n    startingSquares: storedSquares || squaresSetByURL,\r\n  }\r\n}\r\n\r\nexport { startingSetup, makeUrlParams, storeSquares, clearAllStorage }\r\n\r\n","// TO DO:  Tidy this code so it less of a dogs dinner.\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { CoreSquare, makeCoreSquare, nGroups, groupSize } from './basics';\r\nimport SolvingArea from './solving-area'\r\nimport SettingArea from './setting-area'\r\nimport { shuffleArray } from './tools';\r\n\r\nimport Wall from './wall';\r\nimport {startingSetup, makeUrlParams, storeSquares } from './url-and-storage-tools';\r\nimport './App.css';\r\n\r\n\r\nfunction groupFromIndex(index: number) {\r\n  return Math.floor(index / groupSize) + 1;\r\n}\r\n\r\nconst startingSetupData = startingSetup();\r\nlet { startingSquares, cluesSetByURL } = startingSetupData;\r\n\r\nfunction lastSolvedGroup(squares: Array<CoreSquare>) {\r\n  for(let group = nGroups; group > 0; --group) {\r\n      if(squares.find(s => s && s.solvedGroup === group)) {\r\n        return group;\r\n      }\r\n  }\r\n  return 0;\r\n}\r\n\r\n// Check that \r\n// - Squares in solved groups below 'groupBeingProcessed' are correctly placed\r\n// = No square is in a solved group greated than  'groupBeingProcessed'\r\n// Throw an error the if check fails.\r\nfunction sanityCheckSolvedGroups(squares: Array<CoreSquare>, groupBeingProcessed: number) {\r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const positional = groupFromIndex(index);\r\n    const current = squares[index].solvedGroup;\r\n    if(positional < groupBeingProcessed) {\r\n        if(positional !== current) {\r\n          throw new Error(`square ${index} is not in solved group ${positional}`)\r\n        }\r\n\r\n        if (current > groupBeingProcessed) {\r\n          throw new Error(`square ${index} is in unexpected solved fron ${current}`)\r\n        }\r\n    }\r\n  }\r\n}\r\nfunction positionSquaresInSolvedGroup(squares: Array<CoreSquare>, groupNo: number) {\r\n\r\n  sanityCheckSolvedGroups(squares, groupNo);\r\n\r\n  // Relies on properties cheched above. \r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const sq = squares[index];\r\n    if (sq.solvedGroup === groupNo && groupFromIndex(index) !== groupNo) {\r\n      const moveTo = squares.findIndex(s => !s.solvedGroup); // Inefficient\r\n      if (groupFromIndex(moveTo) !== groupNo) {\r\n        throw new Error(\"Bah! Something has gone wrong\");\r\n      }\r\n      [squares[index], squares[moveTo]] = [squares[moveTo], squares[index]];\r\n    }\r\n  }\r\n}\r\n\r\nconst App: FC<{}> = () => {\r\n\r\n  const [coreSquares, setCoreSquares] = useState(startingSquares);\r\n  const [cluesEntered, setCluesEntered] = useState(false);\r\n\r\n  useEffect(() => { document.title = \"OnlyConnect\" });\r\n\r\n  const cluesSet = (clues: Array<string>) => {\r\n    const coreSquares_ = clues.map((clue, index) => {\r\n      const group = Math.floor(index / 4);\r\n      return makeCoreSquare(group, clue);\r\n    });\r\n    setCoreSquares(coreSquares_);\r\n    setCluesEntered(true);\r\n  }\r\n\r\n\r\n  const clueSelected: (index: number) => void = (index) => {\r\n\r\n    // Ignore squares that have already been solved.\r\n    if (cluesSetByURL && !coreSquares[index].solvedGroup) {\r\n      let squares = [...coreSquares];\r\n      squares.forEach(s => s.badGuess = false);\r\n      squares[index].selected = !squares[index].selected;\r\n\r\n      let selected = squares.filter(cs => cs.selected);\r\n      if (selected.find(s => s.solvedGroup)) {\r\n        throw new Error(\"Selected square is already solved\");\r\n      }\r\n\r\n      if (selected.length === groupSize) {\r\n        selected.forEach(s => s.selected = false);\r\n\r\n        if (selected.every(s => s.answerGroup === selected[0].answerGroup)) {\r\n          // The selected sqaures are in the same group, so the group has been solved.\r\n\r\n          const solvedGroup = lastSolvedGroup(squares) + 1;\r\n\r\n\r\n          selected.forEach(s => s.solvedGroup = solvedGroup);\r\n          positionSquaresInSolvedGroup(squares, solvedGroup);\r\n\r\n          // If the last but one group has been solve, then the last group \r\n          // must also be solved.\r\n          if (solvedGroup + 1 === nGroups) {\r\n            squares.forEach(s => {\r\n              if (!s.solvedGroup) {\r\n                s.solvedGroup = nGroups;\r\n              }\r\n            })\r\n\r\n\r\n          }\r\n        } else {\r\n          selected.forEach(s => s.badGuess = true);\r\n        }\r\n      }\r\n      storeSquares(squares);\r\n      setCoreSquares(squares);\r\n    }\r\n  }\r\n\r\n  const hasBadGuess = Boolean(coreSquares.find(s => s.badGuess));\r\n\r\n  const doClearGuess = () => {\r\n    let newSquares = [...coreSquares];\r\n    newSquares.forEach(s => {\r\n      s.badGuess = false;\r\n      s.selected = false;\r\n    });\r\n    setCoreSquares(newSquares);\r\n  }\r\n\r\n  const doRestart = () => {\r\n    storeSquares(null);\r\n    window.location.reload();\r\n  }\r\n\r\n  if (cluesSetByURL) {\r\n    return (<SolvingArea\r\n      coreSquares={coreSquares}\r\n      hasBadGuess={hasBadGuess}\r\n      clueSelected={clueSelected}\r\n      doClearGuess={doClearGuess}\r\n      doRestart={doRestart}\r\n    />);\r\n  }\r\n\r\n  const ResultArea = () => {\r\n    const shuffled = shuffleArray([...coreSquares]);\r\n    const urlParams = makeUrlParams(shuffled);\r\n    const url = window.location.href + \"?\" + urlParams.toString();\r\n    return (\r\n      <div>\r\n        <Wall coreSquares={coreSquares} />\r\n        <div> <a href={url} target=\"blank\">Randomised (Playable)</a> </div>\r\n      </div>);\r\n  }\r\n\r\n  const recordClues = (clues: Array<string> | null) => {\r\n    if (clues) {\r\n      cluesSet(clues);\r\n    } else {\r\n      setCluesEntered(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"setting-area\">\r\n      <SettingArea recordClues={recordClues} />\r\n      {cluesEntered ? <ResultArea /> : null}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}