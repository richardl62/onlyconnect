{"version":3,"sources":["wall.tsx","tools.ts","app.tsx","reportWebVitals.ts","index.tsx"],"names":["Square","coreSquare","index","onChange","onSelect","className","type","value","clue","event","target","selected","badGuess","solvedGroup","onClick","Error","Wall","coreSquares","map","cs","toString","DumbEncrypt","val","encrypted","this","prime","Math","floor","random","undoInt","groupFromIndex","CoreSquare","answerGroup","cluesSetByURL","startingSquares","positionSquaresInSolvedGroup","squares","groupNo","groupBeingProcessed","length","positional","current","sanityCheckSolvedGroups","moveTo","findIndex","s","urlParams","URLSearchParams","window","location","search","urlClues","get","clues","split","groupSize","console","log","unpackURLClues","urlSolutionGroups","values","urlKey","combinedValues","parseInt","i","push","reverse","g","filter","k","unpackURLSolutionGroups","alert","n","processURLParams","App","useState","setCoreSquares","lastSolvedGroup","setLastSolvedGroup","useEffect","document","title","finishedEnteringWords","forEach","append","slice","key","doInt","makeUrlParams","array","j","shuffleArray","open","href","hasGuess","Boolean","find","hasBadGuess","ClearGuessButton","newSquares","DoneEnteringCluesButton","every","undefined","newClue","replace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6f83affd.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\n\r\n\r\ninterface CoreSquare {\r\n    clue: string;\r\n    selected: boolean;\r\n    badGuess: boolean;\r\n    solvedGroup: number | null;\r\n};\r\n\r\ninterface SquareProps {\r\n    coreSquare: CoreSquare;\r\n    index: number;\r\n    onChange?: (index: number, word: string) => void;\r\n    onSelect?: (index:number) => void;\r\n}\r\n\r\nconst Square : FC<SquareProps> = ({coreSquare, index, onChange, onSelect}: SquareProps) => {\r\n  \r\n    if (onChange) {\r\n        const onClueChange: (event: any) => void = (event) => {\r\n            onChange(index, event.target.value)\r\n        };\r\n\r\n        return (\r\n            <div className=\"square\">\r\n                <input type=\"text\" value={coreSquare.clue} onChange={onClueChange} />\r\n            </div>\r\n            );\r\n    }\r\n    else if (onSelect) {\r\n        const onClick: () => void = () => {\r\n            onSelect(index)\r\n        };\r\n        \r\n        let className=\"square\";\r\n        if(coreSquare.selected) {\r\n            className += \" selected\";\r\n        }\r\n        if(coreSquare.badGuess) {\r\n            className += \" bad-guess\";\r\n        }\r\n        if(coreSquare.solvedGroup) {\r\n            className += \" group\" + coreSquare.solvedGroup;\r\n        }\r\n\r\n        return (\r\n            <div\r\n                onClick={onClick}\r\n                className={className}\r\n                >\r\n                {coreSquare.clue}\r\n            </div>\r\n            );\r\n    }\r\n    else {\r\n        throw Error(\"Oops\");\r\n    }\r\n}\r\n\r\n\r\ninterface WallProps {\r\n    coreSquares: Array<CoreSquare>,\r\n    onChange?: (index: number, clue: string) => void,\r\n    onSelect?: (index: number) => void,\r\n};\r\n\r\nconst Wall: FC<WallProps> = ({ coreSquares, onChange, onSelect }: WallProps) => {\r\n    return (\r\n        <div className=\"wall\">\r\n            {coreSquares.map((cs: CoreSquare, index: number) => (\r\n                <Square \r\n                    key={index.toString()} \r\n                    index={index}\r\n                    coreSquare={cs}\r\n                    onChange={onChange}\r\n                    onSelect={onSelect}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wall;\r\n","// Shuffle array in place. Return the shuffled array\r\nexport function shuffleArray<T>(array: Array<T>) {\r\n    // From https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n  \r\nexport  class DumbEncrypt {\r\n    private static readonly  prime = 19793;\r\n  \r\n    static doInt(val: number) {\r\n      const encrypted = val * this.prime +\r\n        Math.floor(Math.random() * this.prime);\r\n  \r\n      if(this.undoInt(encrypted) !== val) {\r\n        throw new Error(`DumbEncypt.doInt Cannot encrypt ${val}`);\r\n      } \r\n      return encrypted;\r\n    }\r\n  \r\n    static undoInt(val: number) {\r\n      return Math.floor(val / this.prime);\r\n    }\r\n  };\r\n\r\n","// TO DO:  Tidy this code so it less of a dogs dinner.\r\nimport React, { FC, useEffect, useState} from 'react';\r\nimport Wall  from './wall';\r\nimport { shuffleArray, DumbEncrypt } from './tools';\r\nimport './App.css';\r\n\r\n// Remove unsuitable characeters from clue\r\nfunction filterClue(clue: string) {\r\n  // For now at least just remove '~' as that has special meaning in\r\n  // the URLs that are generated. \r\n  return clue.replace(/~/g, \"\");\r\n}\r\n\r\nlet startingClues: Array<string>;\r\n// startingClues = [\r\n//   'a1', 'a2', 'a3', 'a4',\r\n//   'b1', 'b2', 'b3', 'b4',\r\n//   'c1', 'c2', 'c3', 'c4',\r\n//   'd1 longlonglong', 'd2', 'd3', 'd4',\r\n// ];\r\n\r\nconst groupSize = 4;\r\nconst nGroups = 4;\r\nconst nSquares = groupSize * nGroups;\r\n\r\nfunction groupFromIndex(index: number) {\r\n  return Math.floor(index/groupSize) + 1;\r\n}\r\n\r\nclass CoreSquare {\r\n  readonly answerGroup: number;\r\n  clue: string;\r\n  selected = false;\r\n  badGuess = false; \r\n  solvedGroup: number | null = null;\r\n\r\n  constructor(answerGroup: number, clue=\"\") {\r\n    this.answerGroup = answerGroup;\r\n    this.clue = clue;\r\n  }\r\n};\r\n\r\n\r\nfunction makeUrlParams(squares: Array<CoreSquare>) {\r\n\r\n  let urlParams = new URLSearchParams();\r\n\r\n  let clues=\"\";\r\n  squares.forEach(s => clues += s.clue + \"~\");\r\n  urlParams.append(\"clues\", clues.slice(0, -1));\r\n\r\n  let key = 0;\r\n  squares.forEach(s => key = key * nGroups + s.answerGroup);\r\n  const encrypted = DumbEncrypt.doInt(key);\r\n  urlParams.append(\"key\", encrypted.toString());\r\n  return urlParams;\r\n}\r\n\r\nfunction unpackURLClues(urlParams: URLSearchParams) {\r\n\r\n  const urlClues = urlParams.get(\"clues\");\r\n  if(urlClues) {\r\n    const clues = urlClues.split(\"~\");\r\n    \r\n    if(clues.length === nSquares) {\r\n      return clues;\r\n    } else {\r\n      console.log(\"Did not find the expected number of clues\", clues);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction unpackURLSolutionGroups(urlParams: URLSearchParams) {\r\n  let values: Array<number> | null = null;\r\n\r\n  const urlKey = urlParams.get(\"key\");\r\n  if (urlKey) {\r\n\r\n    let combinedValues = DumbEncrypt.undoInt(parseInt(urlKey));\r\n\r\n    values = [];\r\n    for (let i = 0; i < nSquares; ++i) {\r\n      const value = combinedValues % nGroups;\r\n      combinedValues = (combinedValues - value) / nGroups;\r\n      values.push(value);\r\n    }\r\n    values.reverse();\r\n\r\n    // Check the values.  There should be groupSize values for each group.\r\n    for (let g = 0; values && g < nGroups; ++g) {\r\n      const matched = values.filter(k => k === g);\r\n      if (matched.length !== groupSize) {\r\n        console.log(\"Cannot interpret urlKey\", urlKey);\r\n        values = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\nlet startingSquares: Array<CoreSquare> = [];\r\nlet cluesSetByURL: boolean;\r\n\r\n// KLUDGE - Use to set gloabls. Would be better called in the App.\r\nfunction processURLParams() {\r\n\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    \r\n    const urlClues = unpackURLClues(urlParams);\r\n    const urlSolutionGroups = unpackURLSolutionGroups(urlParams);\r\n    \r\n    cluesSetByURL = false;\r\n    if(urlClues && urlSolutionGroups) {\r\n      cluesSetByURL = true;\r\n      \r\n      for(let i = 0; i < nSquares; ++i) {\r\n        startingSquares.push(\r\n          new CoreSquare(urlSolutionGroups[i], urlClues[i])\r\n        );\r\n      }\r\n    }\r\n    else {\r\n      if(urlParams.toString()) {\r\n        alert(\"Could not understand URL parameters\");\r\n      }\r\n\r\n      for (let groupNo = 0; groupNo < nGroups; ++groupNo) {\r\n        for (let n = 0; n < groupSize; ++n) {\r\n          let s = new CoreSquare(groupNo);\r\n          startingSquares.push(s);\r\n\r\n          // To help with testing\r\n          if (startingClues) {\r\n            s.clue = startingClues[n + groupNo * groupSize];\r\n          }\r\n        }\r\n      }\r\n    }\r\n}\r\n\r\nprocessURLParams();\r\n\r\n\r\n// Check that \r\n// - Squares in solved groups below 'groupBeingProcessed' are correctly placed\r\n// = No square is in a solved group greated than  'groupBeingProcessed'\r\n// Throw an error the if check fails.\r\nfunction sanityCheckSolvedGroups(squares: Array<CoreSquare>, groupBeingProcessed: number) {\r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const positional = groupFromIndex(index);\r\n    const current = squares[index].solvedGroup;\r\n    if(positional < groupBeingProcessed) {\r\n        if(positional !== current) {\r\n          throw new Error(`square ${index} is not in solved group ${positional}`)\r\n        }\r\n\r\n        if (current > groupBeingProcessed) {\r\n          throw new Error(`square ${index} is in unexpected solved fron ${current}`)\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\nfunction positionSquaresInSolvedGroup(squares: Array<CoreSquare>, groupNo: number) {\r\n\r\n  sanityCheckSolvedGroups(squares, groupNo);\r\n\r\n  // Relies on properties cheched above. \r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const sq = squares[index];\r\n    if (sq.solvedGroup === groupNo && groupFromIndex(index) !== groupNo) {\r\n      const moveTo = squares.findIndex(s => !s.solvedGroup); // Inefficient\r\n      if (groupFromIndex(moveTo) !== groupNo) {\r\n        throw new Error(\"Bah! Something has gone wrong\");\r\n      }\r\n      [squares[index], squares[moveTo]] = [squares[moveTo], squares[index]];\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst App: FC<{}> = () => {\r\n\r\n  const [coreSquares, setCoreSquares] = useState(startingSquares);\r\n  const [lastSolvedGroup, setLastSolvedGroup] = useState(0);\r\n  useEffect(()=>{document.title = \"OnlyConnect\"});\r\n\r\n  const clueChange: (index: number, newClue: string) => void = (index, newClue) => {\r\n    let newSquares = [...coreSquares];\r\n    newSquares[index].clue = filterClue(newClue);\r\n    setCoreSquares(newSquares);\r\n  }\r\n\r\n  const finishedEnteringWords: () => void = () => {\r\n    const shuffled = shuffleArray([...coreSquares]);\r\n    const urlParams = makeUrlParams(shuffled);\r\n    //const urlParams = makeUrlParams(coreSquares);\r\n    window.open(window.location.href + \"?\" + urlParams.toString());\r\n  }\r\n\r\n\r\n  const clueSelected: (index: number) => void = (index) => {\r\n\r\n    // Ignore squares that have already been solved.\r\n    if(cluesSetByURL && !coreSquares[index].solvedGroup) {\r\n      let squares = [...coreSquares];\r\n      squares.forEach(s => s.badGuess = false);\r\n      squares[index].selected = !squares[index].selected;\r\n\r\n      let selected = squares.filter(cs => cs.selected);\r\n      if(selected.find(s => s.solvedGroup)) {\r\n        throw new Error(\"Selected square is already solved\");\r\n      }\r\n\r\n      if( selected.length === groupSize ) {\r\n        selected.forEach(s => s.selected = false);\r\n\r\n        if (selected.every(s => s.answerGroup === selected[0].answerGroup)) {\r\n          const solvedGroup = lastSolvedGroup + 1;\r\n          setLastSolvedGroup(solvedGroup);\r\n\r\n          selected.forEach(s => s.solvedGroup = solvedGroup);\r\n          positionSquaresInSolvedGroup(squares, solvedGroup);\r\n\r\n           // If the last but one group has been solve, then the last group \r\n          // must also be solved.\r\n          if(solvedGroup + 1 === nGroups) {\r\n            squares.forEach(s => {\r\n              if(!s.solvedGroup) {\r\n                s.solvedGroup = nGroups;\r\n              }\r\n            })\r\n            setLastSolvedGroup(nGroups);\r\n          }\r\n        } else {\r\n          selected.forEach(s => s.badGuess = true);\r\n        }\r\n      }\r\n\r\n      setCoreSquares(squares);\r\n    }\r\n  }\r\n\r\n  const hasGuess = Boolean(coreSquares.find(s => (s.selected || s.badGuess)));\r\n  const hasBadGuess = Boolean(coreSquares.find(s => s.badGuess));\r\n\r\n  const ClearGuessButton: FC = () => {\r\n\r\n    const doClear = () => {\r\n      let newSquares = [...coreSquares];\r\n      newSquares.forEach(s => {\r\n        s.badGuess = false;\r\n        s.selected = false;\r\n      });\r\n      setCoreSquares(newSquares);\r\n    }\r\n\r\n    return (\r\n      <button type=\"button\" onClick={doClear}>\r\n        Clear guess\r\n      </button>\r\n    )\r\n  };\r\n\r\n\r\n  const DoneEnteringCluesButton: FC = () => {\r\n    return <button type=\"button\" onClick={finishedEnteringWords}>Done</button>\r\n  }\r\n\r\n  return (\r\n    <div className=\"onlyconnect\">\r\n      <Wall coreSquares={coreSquares} \r\n        onSelect={clueSelected} \r\n        onChange={cluesSetByURL? undefined: clueChange}\r\n      />\r\n      <div className=\"controls\">\r\n        {cluesSetByURL ? null : <DoneEnteringCluesButton />}\r\n        {hasGuess ? <ClearGuessButton /> : null}\r\n        {hasBadGuess ? <div>Wrong!</div> : null}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}