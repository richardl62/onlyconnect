{"version":3,"sources":["grid-square.ts","strings.tsx","tools.ts","url-tools.ts","constants.ts","wall.tsx","grid-and-link.tsx","local-storage.ts","setting-area.tsx","solving-area.tsx","starting-setup.ts","app.tsx","reportWebVitals.ts","index.tsx"],"names":["filterClue","clue","replace","makeGridSquare","answerGroup","selected","badGuess","solvedGroup","makeGridStr","shuffleStr","DumbEncrypt","val","encrypted","this","prime","Math","floor","random","undoInt","Error","makeSquares","urlParams","urlClues","get","clues","split","groupSize","length","console","log","unpackURLClues","urlSolutionGroups","values","urlKey","combinedValues","parseInt","i","value","push","reverse","g","filter","k","unpackURLSolutionGroups","Boolean","window","location","search","squares","Square","gridSquare","index","onSelect","className","group","onClick","Wall","gridSquares","map","cs","toString","GridAndLink","shuffle","URLSearchParams","forEach","s","append","slice","key","doInt","makeUrlParams","url","href","type","target","LocalStorage","_key","rawStorage","localStorage","getItem","JSON","parse","data","undefined","removeItem","stringified","stringify","setItem","sq","join","clear","trimmed","words","result","t","trim","SettingArea","recordClues","useState","recordedText","setRecordedText","errorMessage","setErrorMessage","ErrorMessage","toLowerCase","cols","rows","onChange","event","spaceSeparated","commaSeparated","text","getCluesCommaSeperated","clearAll","SolvingArea","hasBadGuess","clueSelected","doClearGuess","doRestart","ClearGuessButton","RestartButton","startingSetup","makeSquaresFromURL","err","alert","getURLsquares","cluesSet","make","getLocalStorage","storedSquares","sanityCheckStoredSquares","groupNo","n","makeEmptySquares","groupFromIndex","positionSquaresInSolvedGroup","groupBeingProcessed","positional","current","sanityCheckSolvedGroups","moveTo","findIndex","startingSquares","cluesSetFromStart","App","setGridSquares","shuffledSquares","setShuffledSquares","cluesEntered","setCluesEntered","useEffect","document","title","find","every","lastSolvedGroup","set","newSquares","reload","gridSquares_","array","j","shuffleArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b2b11200.chunk.js","sourcesContent":["\r\n\r\n// Remove unsuitable characeters from clue\r\nfunction filterClue(clue: string) {\r\n  // For now at least just remove '~' as that has special meaning in\r\n  // the URLs that are generated. \r\n  return clue.replace(/~/g, \"\");\r\n}\r\n\r\n// Warning: Change this interface is likely to break any recorded data\r\ninterface GridSquare {\r\n  readonly answerGroup: number;\r\n  clue: string;\r\n  selected: boolean;\r\n  badGuess: boolean;\r\n  solvedGroup: number | null;\r\n}\r\n\r\nfunction makeGridSquare(answerGroup: number, clue: string = \"\") : GridSquare {\r\n  return {\r\n    answerGroup: answerGroup,\r\n    clue: filterClue(clue),\r\n    selected: false,\r\n    badGuess: false,\r\n    solvedGroup: null,\r\n  }\r\n}\r\n\r\n\r\nexport type {GridSquare};\r\nexport {makeGridSquare};\r\n","export const makeGridStr = 'Make Grid';\r\nexport const shuffleStr = 'Shuffle';\r\n","// Shuffle array in place. Return the shuffled array\r\nexport function shuffleArray<T>(array: Array<T>) {\r\n    // From https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n  \r\nexport  class DumbEncrypt {\r\n    private static readonly  prime = 19793;\r\n  \r\n    static doInt(val: number) {\r\n      const encrypted = val * this.prime +\r\n        Math.floor(Math.random() * this.prime);\r\n  \r\n      if(this.undoInt(encrypted) !== val) {\r\n        throw new Error(`DumbEncypt.doInt Cannot encrypt ${val}`);\r\n      } \r\n      return encrypted;\r\n    }\r\n  \r\n    static undoInt(val: number) {\r\n      return Math.floor(val / this.prime);\r\n    }\r\n  };\r\n\r\n","import { GridSquare, makeGridSquare } from './grid-square';\r\nimport {  nSquares, groupSize, nGroups } from './constants';\r\nimport { DumbEncrypt } from './tools';\r\n\r\n\r\nfunction makeUrlParams(squares: Array<GridSquare>) {\r\n\r\n  let urlParams = new URLSearchParams();\r\n\r\n  let clues = \"\";\r\n  squares.forEach(s => clues += s.clue + \"~\");\r\n  urlParams.append(\"clues\", clues.slice(0, -1));\r\n\r\n  let key = 0;\r\n  squares.forEach(s => key = key * nGroups + s.answerGroup);\r\n  const encrypted = DumbEncrypt.doInt(key);\r\n  urlParams.append(\"key\", encrypted.toString());\r\n  return urlParams;\r\n}\r\n\r\nfunction unpackURLClues(urlParams: URLSearchParams) {\r\n\r\n  const urlClues = urlParams.get(\"clues\");\r\n  if (urlClues) {\r\n    const clues = urlClues.split(\"~\");\r\n\r\n    if (clues.length === nSquares) {\r\n      return clues;\r\n    } else {\r\n      console.log(\"Did not find the expected number of clues\", clues);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction unpackURLSolutionGroups(urlParams: URLSearchParams) {\r\n  let values: Array<number> | null = null;\r\n\r\n  const urlKey = urlParams.get(\"key\");\r\n  if (urlKey) {\r\n\r\n    let combinedValues = DumbEncrypt.undoInt(parseInt(urlKey));\r\n\r\n    values = [];\r\n    for (let i = 0; i < nSquares; ++i) {\r\n      const value = combinedValues % nGroups;\r\n      combinedValues = (combinedValues - value) / nGroups;\r\n      values.push(value);\r\n    }\r\n    values.reverse();\r\n\r\n    // Check the values.  There should be groupSize values for each group.\r\n    for (let g = 0; values && g < nGroups; ++g) {\r\n      const matched = values.filter(k => k === g);\r\n      if (matched.length !== groupSize) {\r\n        console.log(\"Cannot interpret urlKey\", urlKey);\r\n        values = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\nfunction makeSquares(urlParams: URLSearchParams) : Array<GridSquare> | null {\r\n\r\n  const urlClues = unpackURLClues(urlParams);\r\n  const urlSolutionGroups = unpackURLSolutionGroups(urlParams);\r\n\r\n\r\n  if (Boolean(urlClues) !== Boolean(urlSolutionGroups)) {\r\n    console.log(\"window.location.search\", window.location.search,\r\n      \"\\nurlClue\", urlClues,\r\n      \"\\nurlSolutionGroups\", urlSolutionGroups\r\n    );\r\n\r\n    throw new Error(\"Could not understand URL parameters\");\r\n  }\r\n\r\n  if (urlClues && urlSolutionGroups) {\r\n    let squares = [];\r\n    for (let i = 0; i < nSquares; ++i) {\r\n      squares.push(makeGridSquare(urlSolutionGroups[i], urlClues[i]));\r\n    }\r\n    return squares;\r\n  } else {\r\n    return null;\r\n  } \r\n\r\n}\r\n\r\nexport { makeSquares, makeUrlParams }\r\n\r\n","export const groupSize = 4;\r\nexport const nGroups = 4;\r\nexport const nSquares = groupSize * nGroups;\r\n\r\nexport function validSolvedGroup(group: number) {\r\n  return group >= 1 && group <= nGroups;\r\n}","import React, { FC } from 'react';\r\nimport {validSolvedGroup} from './constants';\r\n\r\ninterface GridSquare {\r\n    clue: string;\r\n    selected: boolean;\r\n    badGuess: boolean;\r\n    solvedGroup: number | null;\r\n};\r\n\r\ninterface SquareProps {\r\n    gridSquare: GridSquare;\r\n    index: number;\r\n    onSelect?: (index:number) => void;\r\n}\r\n\r\nconst Square : FC<SquareProps> = ({gridSquare, index, onSelect}: SquareProps) => {\r\n  \r\n    const onClick: () => void = () => {\r\n        if(onSelect)\r\n            onSelect(index)\r\n    };\r\n\r\n    let className = \"square\";\r\n    if (gridSquare.selected) {\r\n        className += \" selected\";\r\n    }\r\n    if (gridSquare.badGuess) {\r\n        className += \" bad-guess\";\r\n    }\r\n\r\n    const solvedGroup = gridSquare.solvedGroup;\r\n    if (solvedGroup !== null) {\r\n        if(validSolvedGroup(solvedGroup)) {\r\n            className += \" group\" + gridSquare.solvedGroup;\r\n        } else {\r\n            console.log(\"Invalid solved group for\", gridSquare);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onClick={onClick}\r\n            className={className}\r\n        >\r\n            {gridSquare.clue}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\ninterface WallProps {\r\n    gridSquares: Array<GridSquare>,\r\n    onSelect?: (index: number) => void,\r\n};\r\n\r\nconst Wall: FC<WallProps> = ({ gridSquares, onSelect }: WallProps) => {\r\n    return (\r\n        <div className=\"wall\">\r\n            {gridSquares.map((cs: GridSquare, index: number) => (\r\n                <Square \r\n                    key={index.toString()} \r\n                    index={index}\r\n                    gridSquare={cs}\r\n                    onSelect={onSelect}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wall;\r\nexport type { GridSquare }","import React from 'react';\r\nimport { GridSquare } from \"./grid-square\";\r\nimport { shuffleStr } from './strings';\r\nimport { makeUrlParams } from \"./url-tools\";\r\nimport Wall from \"./wall\";\r\n\r\ninterface GridAndLinkProps {\r\n  gridSquares : Array<GridSquare>;\r\n  shuffle: () => void;\r\n};\r\nfunction GridAndLink({gridSquares, shuffle} : GridAndLinkProps ) {\r\n  const urlParams = makeUrlParams(gridSquares);\r\n  const url = window.location.href + \"?\" + urlParams.toString();\r\n\r\n  return (\r\n    <div>\r\n      <Wall gridSquares={gridSquares} />\r\n      <div>\r\n        <button type='button' onClick={shuffle}>{shuffleStr}</button>\r\n      </div>\r\n      <div>\r\n        <span>Playable link </span>\r\n        <a href={url} target=\"blank\">here</a>\r\n      </div>\r\n    </div>);\r\n}\r\n\r\nexport default GridAndLink;","import { GridSquare } from './grid-square';\r\n\r\n\r\nclass LocalStorage {\r\n  constructor(key: string) {\r\n    this._key = key;\r\n  }\r\n  readonly _key: string;\r\n\r\n  get() : any {\r\n    const rawStorage = localStorage.getItem(this._key);\r\n    return rawStorage ? JSON.parse(rawStorage) : null;\r\n  }\r\n\r\n  set(data: any) {\r\n    if(data === null || data === undefined) {\r\n      localStorage.removeItem(this._key);\r\n    } else {\r\n      const stringified = JSON.stringify(data);\r\n      localStorage.setItem(this._key, stringified)\r\n    }\r\n  }\r\n\r\n  static make(squares: Array<GridSquare>) {\r\n    const key = squares.map(sq => sq.clue).join();\r\n    return new LocalStorage(key);\r\n  }\r\n\r\n  static clearAll() {\r\n    localStorage.clear();\r\n  }\r\n}\r\n\r\n\r\nexport default LocalStorage;","import React, { useState } from 'react';\r\nimport LocalStorage from \"./local-storage\";\r\nimport { makeGridStr, shuffleStr } from './strings';\r\n\r\nfunction trimmed(words: Array<string>) {\r\n    console.log(\"Pre-trimmed\", words);\r\n\r\n    let result: Array<string> = [];\r\n    for (let i in words) {\r\n        const t = words[i].trim();\r\n        if (t) {\r\n            result.push(t);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction getCluesSpaceSeperated(text: string) {\r\n    return trimmed(text.split(/[,\\s]/));\r\n}\r\n\r\n// Find non-empty clues separated by commas or newlines\r\nfunction getCluesCommaSeperated(text: string) {\r\n    return trimmed(text.split(/[,\\n]/));\r\n}\r\n\r\ninterface SettingAreaProps {\r\n    recordClues: (clues: Array<string> | null) => void;\r\n}\r\nfunction SettingArea({ recordClues }: SettingAreaProps) {\r\n    const [recordedText, setRecordedText] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n\r\n    function textAreaChange(event: any) {\r\n        setRecordedText(event.target.value);\r\n    }\r\n\r\n    function onDone() {\r\n        setErrorMessage(\"\");\r\n\r\n        const spaceSeparated = getCluesSpaceSeperated(recordedText);\r\n        console.log(\"Space separated\", spaceSeparated);\r\n        if (spaceSeparated.length === 16) {\r\n            recordClues(spaceSeparated);\r\n            return;\r\n        }\r\n\r\n        const commaSeparated = getCluesCommaSeperated(recordedText);\r\n        console.log(\"Comma separated\", commaSeparated);\r\n\r\n        if (commaSeparated.length === 16) {\r\n            recordClues(commaSeparated);\r\n            return;\r\n        }\r\n\r\n        setErrorMessage(`Did not find 16 clues: \r\n            ${spaceSeparated.length} found with space seperation.\r\n            ${commaSeparated.length} found with comma-seperation.`\r\n        );\r\n\r\n        recordClues(null);\r\n\r\n\r\n    }\r\n\r\n    const ErrorMessage = () => {\r\n        if (errorMessage) {\r\n            return <div>{\"Error: \" + errorMessage}</div>\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"setting-area\" >\r\n            <div>\r\n                <span>{`Enter clues then ${makeGridStr.toLowerCase()}`}</span>\r\n                <span>{` and ${shuffleStr.toLowerCase()}.`}</span>\r\n                <br/>\r\n                <span>Clues can be single words, or words and phrases seperated by commas.</span>\r\n            </div>\r\n    \r\n            <textarea\r\n                cols={50}\r\n                rows={4}\r\n                onChange={textAreaChange}\r\n            />\r\n\r\n            <div className=\"setting-area-buttons\">\r\n                <button className=\"done-button\" onClick={onDone}>{makeGridStr}</button>\r\n                <button className=\"clear-stored-solutions-button\" onClick={LocalStorage.clearAll}>\r\n                    Clear stored solutions\r\n            </button>\r\n            </div>\r\n            <ErrorMessage />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SettingArea;","import React from 'react';\r\nimport Wall, { GridSquare } from './wall'\r\n\r\n\r\ninterface SolvingAreaProps {\r\n    gridSquares: Array<GridSquare>\r\n    hasBadGuess: boolean;\r\n    clueSelected: (index: number) => void,\r\n    doClearGuess: ()=>void;\r\n    doRestart: ()=>void;\r\n}\r\n\r\nfunction SolvingArea({gridSquares, hasBadGuess, clueSelected, doClearGuess, doRestart} : SolvingAreaProps) {\r\n\r\n     const ClearGuessButton = () => (\r\n        <button type=\"button\" onClick={doClearGuess}>\r\n            Clear guess\r\n        </button>\r\n    );\r\n    const RestartButton = () => (\r\n        <button className=\"restart-button\" type=\"button\" onClick={doRestart}>\r\n            Restart\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <div className=\"solving-area\">\r\n            <Wall\r\n                gridSquares={gridSquares}\r\n                onSelect={clueSelected}\r\n            />\r\n            <div className=\"solving-controls\">\r\n                <div>\r\n                    <ClearGuessButton/>\r\n                    {hasBadGuess ? <div>Wrong!</div> : null}\r\n                </div>\r\n                <RestartButton/>\r\n            </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default SolvingArea;","import { GridSquare, makeGridSquare } from './grid-square';\r\nimport { nGroups, groupSize, nSquares } from './constants';\r\nimport { makeSquares as makeSquaresFromURL } from './url-tools';\r\nimport LocalStorage from \"./local-storage\";\r\n\r\nfunction makeEmptySquares() {\r\n  let squares = [];\r\n  for (let groupNo = 0; groupNo < nGroups; ++groupNo) {\r\n    for (let n = 0; n < groupSize; ++n) {\r\n      squares.push(makeGridSquare(groupNo));\r\n    }\r\n  }\r\n\r\n  return squares;\r\n}\r\n\r\nfunction sanityCheckStoredSquares(\r\n  squares: any\r\n) {\r\n  if (squares.length !== nSquares) {\r\n    alert(\"Recorded data appears incorrect\");\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\ntype StartingSetup = [Array<GridSquare>, boolean, LocalStorage | null];\r\n\r\nfunction getURLsquares() {\r\n  try {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    return makeSquaresFromURL(urlParams);\r\n  } catch (err) {\r\n    console.log(err);\r\n    alert(\"URL appears incorrect\");\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getLocalStorage(squares: Array<GridSquare>): LocalStorage | null {\r\n  try {\r\n    return LocalStorage.make(squares);\r\n  } catch (err) {\r\n    console.log(err);\r\n    alert(\"Problem getting recorded data\");\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n\r\nfunction startingSetup(): StartingSetup {\r\n  let squares = getURLsquares();\r\n  const cluesSet = Boolean(squares);\r\n\r\n  let localStorage = squares && getLocalStorage(squares);\r\n\r\n  if (localStorage) {\r\n    const storedSquares = localStorage.get();\r\n    if (storedSquares && sanityCheckStoredSquares(storedSquares)) {\r\n      squares = storedSquares;\r\n    }\r\n  }\r\n\r\n  squares = squares || makeEmptySquares();\r\n\r\n  return [squares, cluesSet, localStorage]\r\n\r\n}\r\n\r\nexport default startingSetup;\r\n","// TO DO:  Tidy this code so it less of a dogs dinner.\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { groupSize, nGroups } from './constants';\r\nimport { GridSquare, makeGridSquare } from './grid-square';\r\nimport GridAndLink from './grid-and-link';\r\nimport SettingArea from './setting-area';\r\nimport SolvingArea from './solving-area';\r\nimport startingSetup from './starting-setup';\r\nimport './App.css';\r\nimport { shuffleArray } from './tools';\r\n\r\nfunction groupFromIndex(index: number) {\r\n  return Math.floor(index / groupSize) + 1;\r\n}\r\n\r\nfunction lastSolvedGroup(squares: Array<GridSquare>) {\r\n  for(let group = nGroups; group > 0; --group) {\r\n      if(squares.find(s => s && s.solvedGroup === group)) {\r\n        return group;\r\n      }\r\n  }\r\n  return 0;\r\n}\r\n\r\n// Check that \r\n// - Squares in solved groups below 'groupBeingProcessed' are correctly placed\r\n// = No square is in a solved group greated than  'groupBeingProcessed'\r\n// Throw an error the if check fails.\r\nfunction sanityCheckSolvedGroups(squares: Array<GridSquare>, groupBeingProcessed: number) {\r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const positional = groupFromIndex(index);\r\n    const current = squares[index].solvedGroup;\r\n    if(positional < groupBeingProcessed) {\r\n        if(positional !== current) {\r\n          throw new Error(`square ${index} is not in solved group ${positional}`)\r\n        }\r\n\r\n        if (current > groupBeingProcessed) {\r\n          throw new Error(`square ${index} is in unexpected solved fron ${current}`)\r\n        }\r\n    }\r\n  }\r\n}\r\nfunction positionSquaresInSolvedGroup(squares: Array<GridSquare>, groupNo: number) {\r\n\r\n  sanityCheckSolvedGroups(squares, groupNo);\r\n\r\n  // Relies on properties cheched above. \r\n  for (let index = 0; index < squares.length; ++index) {\r\n    const sq = squares[index];\r\n    if (sq.solvedGroup === groupNo && groupFromIndex(index) !== groupNo) {\r\n      const moveTo = squares.findIndex(s => !s.solvedGroup); // Inefficient\r\n      if (groupFromIndex(moveTo) !== groupNo) {\r\n        throw new Error(\"Bah! Something has gone wrong\");\r\n      }\r\n      [squares[index], squares[moveTo]] = [squares[moveTo], squares[index]];\r\n    }\r\n  }\r\n}\r\n\r\nconst [startingSquares, cluesSetFromStart, localStorage ] = startingSetup();\r\n\r\nconst App: FC<{}> = (): JSX.Element => {\r\n\r\n  const [gridSquares, setGridSquares] = useState(startingSquares);\r\n  const [shuffledSquares, setShuffledSquares] = useState(startingSquares);\r\n  const [cluesEntered, setCluesEntered] = useState(false);\r\n\r\n  const doShuffle = () => {\r\n    setShuffledSquares(shuffleArray([...gridSquares]));\r\n  }\r\n\r\n  useEffect(() => { document.title = \"OnlyConnect\" });\r\n\r\n  const cluesSet = (clues: Array<string>) => {\r\n    const gridSquares_ = clues.map((clue, index) => {\r\n      const group = Math.floor(index / 4);\r\n      return makeGridSquare(group, clue);\r\n    });\r\n    setGridSquares(gridSquares_);\r\n    setShuffledSquares(gridSquares_);\r\n    setCluesEntered(true);\r\n  }\r\n\r\n\r\n  const clueSelected: (index: number) => void = (index) => {\r\n    // Ignore squares that have already been solved.\r\n    if (cluesSetFromStart && !gridSquares[index].solvedGroup) {\r\n\r\n      let squares = [...gridSquares];\r\n      squares.forEach(s => s.badGuess = false);\r\n      squares[index].selected = !squares[index].selected;\r\n\r\n      let selected = squares.filter(cs => cs.selected);\r\n      if (selected.find(s => s.solvedGroup)) {\r\n        throw new Error(\"Selected square is already solved\");\r\n      }\r\n\r\n      if (selected.length === groupSize) {\r\n        selected.forEach(s => s.selected = false);\r\n\r\n        if (selected.every(s => s.answerGroup === selected[0].answerGroup)) {\r\n          // The selected sqaures are in the same group, so the group has been solved.\r\n\r\n          const solvedGroup = lastSolvedGroup(squares) + 1;\r\n\r\n\r\n          selected.forEach(s => s.solvedGroup = solvedGroup);\r\n          positionSquaresInSolvedGroup(squares, solvedGroup);\r\n\r\n          // If the last but one group has been solve, then the last group \r\n          // must also be solved.\r\n          if (solvedGroup + 1 === nGroups) {\r\n            squares.forEach(s => {\r\n              if (!s.solvedGroup) {\r\n                s.solvedGroup = nGroups;\r\n              }\r\n            })\r\n\r\n\r\n          }\r\n        } else {\r\n          selected.forEach(s => s.badGuess = true);\r\n        }\r\n      }\r\n\r\n\r\n      localStorage!.set(squares);\r\n      setGridSquares(squares);\r\n    }\r\n  }\r\n\r\n  const hasBadGuess = Boolean(gridSquares.find(s => s.badGuess));\r\n\r\n  const doClearGuess = () => {\r\n    let newSquares = [...gridSquares];\r\n    newSquares.forEach(s => {\r\n      s.badGuess = false;\r\n      s.selected = false;\r\n    });\r\n    setGridSquares(newSquares);\r\n  }\r\n\r\n  const doRestart = () => {\r\n    localStorage!.set(null);\r\n    window.location.reload();\r\n  }\r\n\r\n  if (cluesSetFromStart) {\r\n    return (<SolvingArea\r\n      gridSquares={gridSquares}\r\n      hasBadGuess={hasBadGuess}\r\n      clueSelected={clueSelected}\r\n      doClearGuess={doClearGuess}\r\n      doRestart={doRestart}\r\n    />);\r\n  }\r\n  const recordClues = (clues: Array<string> | null) => {\r\n    if (clues) {\r\n      cluesSet(clues);\r\n    } else {\r\n      setCluesEntered(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"setting-area\">\r\n      <SettingArea recordClues={recordClues} />\r\n      {cluesEntered ? \r\n        <GridAndLink gridSquares={shuffledSquares} shuffle={doShuffle} /> \r\n        : null\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}